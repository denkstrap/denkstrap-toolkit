[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/cache/cache.service.js",
    "content": "/**\n * # The cache service\n *\n * This is a simple service for providing a cache system in the frontend. This\n * one is an object cache saving the values in an object. It will not be persitent\n * between requests.\n */\nexport class Cache {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.cacheMap = {};\n    }\n\n    /**\n     * Get a value from the cache\n     *\n     * @param {String} key\n     * @return {mixed}\n     */\n    getValue( key ) {\n        this.checkKey( key );\n\n        if ( typeof this.cacheMap[ key ] === 'undefined' ) {\n            throw new Error( 'Check cache via isCached method before trying to fetch a value' );\n        }\n        return this.cacheMap[ key ];\n    }\n\n    /**\n     * Checks if a value is stored for the given key\n     * Checking is not done via getValue method\n     * reason: a value could be of type boolean and so not be handled proper\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    isCached( key ) {\n        this.checkKey( key );\n        return this.cacheMap[ key ] ? true : false;\n    }\n\n    /**\n     * Set a value\n     *\n     * @param {String} key\n     * @param {mixed} value\n     */\n    setValue( key, value ) {\n        this.checkKey( key );\n        this.cacheMap[ key ] = value;\n    }\n\n    /**\n     * Check for the type of the key\n     *\n     * @param {String} key\n     * @throws {TypeError}\n     */\n    checkKey( key ) {\n        if ( typeof key !== 'string' ) {\n            throw new TypeError( 'Key must be a string' );\n        }\n    }\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/cache/cache.service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Cache",
    "memberof": "src/cache/cache.service.js",
    "static": true,
    "longname": "src/cache/cache.service.js~Cache",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/cache/cache.service.js",
    "importStyle": "{Cache}",
    "description": "# The cache service\n\nThis is a simple service for providing a cache system in the frontend. This\none is an object cache saving the values in an object. It will not be persitent\nbetween requests.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cache/cache.service.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "cacheMap",
    "memberof": "src/cache/cache.service.js~Cache",
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#cacheMap",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/cache/cache.service.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#getValue",
    "access": "public",
    "description": "Get a value from the cache",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "mixed"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "isCached",
    "memberof": "src/cache/cache.service.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#isCached",
    "access": "public",
    "description": "Checks if a value is stored for the given key\nChecking is not done via getValue method\nreason: a value could be of type boolean and so not be handled proper",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/cache/cache.service.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#setValue",
    "access": "public",
    "description": "Set a value",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "checkKey",
    "memberof": "src/cache/cache.service.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cache/cache.service.js~Cache#checkKey",
    "access": "public",
    "description": "Check for the type of the key",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/validation/formValidation/behaviour.js",
    "content": "import getValidationFields from './getValidationFields';\n\n/**\n * The behaviour function provides cases for to trigger validations.\n * Handlers are stored to consider dynamic dom manipulating.\n */\nexport class Behaviour {\n\n    /**\n     *\n     * @param {String} formId - The id of the form.\n     * @param {String} validationAttr\n     * @param {Function} condition - The condition for to collect the validating fields\n     * @param {Object} configFields - The config of fields\n     * @param {Object} validation  - The validation service object\n     */\n    constructor( formId, validationAttr, condition, configFields, validation ) {\n\n        if ( typeof formId !== 'string' ) {\n            throw new TypeError( 'form id must be of type String' );\n        }\n\n        if ( typeof validationAttr !== 'string' ) {\n            throw new TypeError( 'validationAttr must be of type String' );\n        }\n\n        if ( typeof condition !== 'function' ) {\n            throw new TypeError( 'formId must be of type function' );\n        }\n\n        if ( typeof configFields !== 'object' ) {\n            throw new TypeError( 'configFields must be of type function' );\n        }\n\n        if ( typeof validation !== 'object' ) {\n            throw new TypeError( 'validation must be of type object' );\n        }\n\n        /**\n         *\n         * @type {String}\n         */\n        this.formId = formId;\n\n        /**\n         * @type {String}\n         */\n        this.validationAttr = validationAttr;\n\n        /**\n         *\n         * @type {Function}\n         */\n        this.condition = condition;\n        /**\n         * @type{Object} validation\n         */\n        this.validation = validation;\n        /**\n         *\n         * @type {Object} configFields\n         */\n        this.configFields = configFields;\n\n        /**\n         * @type {Object} The field event handlers are stored in this object ({@link behaviour}).\n         */\n        this.behaviourHandler = {};\n    }\n\n    /**\n     * Updates the configFields property\n     * @param {configFields} configFields - The config of fields\n     * @param {Object} validation - The validation service object\n     */\n    updateConfigFieldsAndValidation( configFields, validation ) {\n        this.configFields = configFields;\n        this.validation = validation;\n    }\n\n    /**\n     * The behaviour for each field\n     */\n    behaviour() {\n        var fields = getValidationFields( this.formId, this.validationAttr, this.condition );\n        Array.prototype.forEach.call( fields, function( field ) {\n            var type = field.getAttribute( 'type' );\n            var tagName = field.tagName.toLowerCase();\n            var eventName = type !== 'checkbox' && type !== 'radio' && tagName !== 'select' ? 'blur' : 'change';\n\n            if ( typeof this.behaviourHandler[ field.id ] !== 'undefined' ) {\n                field.removeEventListener( eventName, this.behaviourHandler[ field.id ] );\n            }\n\n            /**\n             * Creates field event handler\n             */\n            var handler = function() {\n                var fieldIdentifier = field.id;\n                this.validation.setValueByField( field );\n                this.validation.validate( fieldIdentifier, this.formId ).catch( function() {} );\n                if ( this.configFields[ fieldIdentifier ].behaviourGroupSel !== null ) {\n\n                    fields = document.querySelectorAll( this.configFields[ fieldIdentifier ].behaviourGroupSel );\n                    Array.prototype.forEach.call( fields, function( field ) {\n\n                        var fieldIdentifierGroupMember = field.id;\n                        if ( fieldIdentifierGroupMember !== fieldIdentifier ) {\n                            this.validation.setValueByField( field );\n                            this.validation.validate( fieldIdentifierGroupMember, this.formId )\n                                .catch( function() {} );\n                        }\n                    }.bind( this ) );\n\n                }\n            }.bind( this );\n\n            this.behaviourHandler[ field.id ] = handler;\n            field.addEventListener( eventName,  handler );\n        }.bind( this ) );\n    }\n}\n\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/behaviour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Behaviour",
    "memberof": "src/validation/formValidation/behaviour.js",
    "static": true,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/behaviour.js",
    "importStyle": "{Behaviour}",
    "description": "The behaviour function provides cases for to trigger validations.\nHandlers are stored to consider dynamic dom manipulating.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "formId",
        "description": "The id of the form."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validationAttr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "The condition for to collect the validating fields"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configFields",
        "description": "The config of fields"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validation",
        "description": "The validation service object"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "formId",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#formId",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "validationAttr",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#validationAttr",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "condition",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#condition",
    "access": "public",
    "description": "",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "validation",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#validation",
    "access": "public",
    "description": "@type{Object} validation",
    "lineNumber": 58,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "configFields",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#configFields",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "behaviourHandler",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#behaviourHandler",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "updateConfigFieldsAndValidation",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#updateConfigFieldsAndValidation",
    "access": "public",
    "description": "Updates the configFields property",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "configFields"
        ],
        "spread": false,
        "optional": false,
        "name": "configFields",
        "description": "The config of fields"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validation",
        "description": "The validation service object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "behaviour",
    "memberof": "src/validation/formValidation/behaviour.js~Behaviour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/behaviour.js~Behaviour#behaviour",
    "access": "public",
    "description": "The behaviour for each field",
    "lineNumber": 84,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/validation/formValidation/cache.js",
    "content": "import {Cache as CacheService} from '../../cache/cache.service';\n/**\n * This Class provides cache functionality to avoid doubled validation\n *\n */\nexport class Cache {\n\n    /**\n     * @constructor\n     * @param {String} validationAttr - validation attr (where validation data is stored)\n     */\n    constructor( validationAttr ) {\n        if ( typeof validationAttr !== 'string' ) {\n            throw new TypeError( 'validationAttr must be of type String' );\n        }\n        this.validationAttr = validationAttr;\n    }\n\n    /**\n     * Validation cache off version\n     *\n     * @return {{getValue: getValue, setValue: setValue}}\n     */\n    getValidationOffCache() {\n        return {\n            getValue: function() {\n                return false;\n            },\n            setValue: function() {\n            }\n        };\n    }\n\n    /**\n     * validation cache (used to avoid unnecessary validations\n     * @returns {{getValue: (function(this:Cache)), setValue: setValue, data: Array}}\n     */\n    getValidationCache() {\n        var cache = Object.assign( new CacheService(), {\n            isCached: function( cacheKey ) {\n                var fieldName = cacheKey.split( '.' )[ 1 ];\n                cache.checkKey( cacheKey );\n                var test = this.isCachingEnabled( fieldName ) && cache.cacheMap[ cacheKey ] ? true : false;\n                return this.isCachingEnabled( fieldName ) && cache.cacheMap[ cacheKey ] ? true : false;\n            }.bind( this )\n        } );\n        return cache;\n    }\n\n    /**\n     *\n     * @param {String} fieldName\n     * @returns {boolean}\n     */\n    isCachingEnabled( fieldName ) {\n        var fieldDom = document.getElementById( fieldName );\n        var objData = fieldDom.getAttribute( this.validationAttr );\n        objData = JSON.parse( objData );\n        /* must have value false to prevent taking undefined as false (no coercion) */\n        return objData.caching === false ? false : true;\n    }\n\n\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "Cache",
    "memberof": "src/validation/formValidation/cache.js",
    "static": true,
    "longname": "src/validation/formValidation/cache.js~Cache",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/cache.js",
    "importStyle": "{Cache}",
    "description": "This Class provides cache functionality to avoid doubled validation",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/formValidation/cache.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/cache.js~Cache#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validationAttr",
        "description": "validation attr (where validation data is stored)"
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "validationAttr",
    "memberof": "src/validation/formValidation/cache.js~Cache",
    "static": false,
    "longname": "src/validation/formValidation/cache.js~Cache#validationAttr",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getValidationOffCache",
    "memberof": "src/validation/formValidation/cache.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/cache.js~Cache#getValidationOffCache",
    "access": "public",
    "description": "Validation cache off version",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "{getValue: getValue, setValue: setValue}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "getValidationCache",
    "memberof": "src/validation/formValidation/cache.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/cache.js~Cache#getValidationCache",
    "access": "public",
    "description": "validation cache (used to avoid unnecessary validations",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{getValue: (function(this:Cache)), setValue: setValue, data: Array}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{getValue: (function(this:Cache)), setValue: setValue, data: Array}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "isCachingEnabled",
    "memberof": "src/validation/formValidation/cache.js~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/cache.js~Cache#isCachingEnabled",
    "access": "public",
    "description": "",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/validation/formValidation/condition.js",
    "content": "/**\n * The condition function provides a condition for validation of each field.\n * @param {Object} field - Reference to dom object.\n * @returns {Boolean}\n */\nexport default function condition( field ) {\n    // adjusted jQuery\n    // https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js\n    if ( !( field instanceof HTMLElement ) ) {\n        throw new TypeError( 'Error[condition( field )]: Field is not an instance of HTMLElement.' );\n    } else {\n        return !!( ( field.offsetWidth || field.offsetHeight ) && field.offsetParent );\n    }\n}\n\n\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/condition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "condition",
    "memberof": "src/validation/formValidation/condition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/condition.js~condition",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/condition.js",
    "importStyle": "condition",
    "description": "The condition function provides a condition for validation of each field.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/validation/formValidation/dispatchEvent.js",
    "content": "/**\n * The eventDispatch function triggers events after each validation of a field\n *\n * @param {Object } fieldDom - Reference to dom element.\n * @param {Boolean} isValid\n */\nexport default function eventDispatch( fieldDom, isValid ) {\n    if ( !( fieldDom instanceof HTMLElement ) ) {\n        throw new TypeError( 'fieldDom is not an instance of HTMLElement.' );\n    }\n\n    if ( typeof isValid !== 'boolean' ) {\n        throw new TypeError( 'isValid is not of type Boolean' );\n    }\n\n    // create and dispatch the event\n    var eventName = fieldDom.id + '-validated';\n    var eventObj = {\n        detail: {\n            isValid: isValid,\n            field: fieldDom\n        }\n    };\n    var event = new CustomEvent( eventName, eventObj );\n    fieldDom.dispatchEvent( event );\n}\n\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/dispatchEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "eventDispatch",
    "memberof": "src/validation/formValidation/dispatchEvent.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/dispatchEvent.js~eventDispatch",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/dispatchEvent.js",
    "importStyle": "eventDispatch",
    "description": "The eventDispatch function triggers events after each validation of a field",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object "
        ],
        "spread": false,
        "optional": false,
        "name": "fieldDom",
        "description": "Reference to dom element."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isValid",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/validation/formValidation/feedbackDisplay.js",
    "content": "/**\n * This Class provides display functionality.\n * Is handles display of error messages and validation states of each field.\n *\n */\nexport class FeedbackDisplay {\n\n    /**\n     * @param {Object} options {@link getOptions}\n     */\n    constructor( options ) {\n        /**\n         * The general feedback display options.\n         * {@link getOptions}\n         * @type {Object}\n         */\n        if ( typeof options !== 'undefined' ) {\n            this.options = Object.assign( this.getOptions(), options );\n            if ( typeof this.options.fieldErrorClass !== 'string' ) {\n                throw new TypeError( 'option fieldErrorClass is not of type String' );\n            }\n            if ( typeof this.options.fieldSuccessClass !== 'string' ) {\n                throw new TypeError( 'option fieldSuccessClass is not of type String' );\n            }\n            if ( typeof this.options.messageTemplate !== 'string' ) {\n                throw new TypeError( 'option messageTemplate is not of type String' );\n            }\n            if ( this.options.messageCreateFunction !== null &&\n                typeof this.options.messageCreateFunction !== 'function' ) {\n                throw new TypeError( 'optionmessageCreateFunction is not of type Null or Function' );\n            }\n        } else {\n            this.options = this.getOptions();\n        }\n    }\n\n    /**\n     *\n     * @return {Object}\n     * @property {String} [fieldErrorClass='validation-error']\n     * @property {String} [fieldSuccessClass='validation-success']\n     * @property {String} [messageTemplate=look at getOptions-src-code, could not escape curly braces]\n     * @property {Function} [messageCreateFunction=null]\n     */\n    getOptions() {\n        return {\n            fieldErrorClass: 'validation-error',\n            fieldSuccessClass: 'validation-success',\n            messageTemplate: '<p id=\"{{ id }}\" class=\"validation-message\" aria-live=\"assertive\" role=\"alert\">' +\n            '{{ message }}</p>',\n            messageCreateFunction: null\n        };\n    }\n\n    /**\n     * The Default display options for each field.\n     * @return {Object} This data is used in {@link getValidationFieldConfig}.\n     *\n     * @property {Boolean} fieldShowState : true - Sets display actions concerning each field directly.\n     * Shows state on true, removes state on false.\n     * @property {Boolean} messageShow : true - Enables displaying of message of field.\n     * Shows message on true and invalid result.\n     *\n     * @property {null} messageLocation : null\n     * @property {null} fieldIdForAriaUsage : null\n     *\n     * @property {Boolean} preferHTMLValidatorMessage : true - Enables prefering message given in HTML over message\n     * given by validator.\n     *\n     * @property {Object} setByValidatorOnly - Set by validator. Usage does not depend on validation result.\n     * These declarations are taken to operate field state actions.\n     * @property {null} setByValidatorOnly.fieldShowStateValidSel -\n     * The given validator should sent a valid CSS selector String.\n     * @property {null} setByValidatorOnly.fieldShowStateInvalidSel -\n     * The given validator should sent a valid CSS selector String.\n     * @property {null} setByValidatorOnly.fieldRemoveStateSel -\n     * The given validator should sent a valid CSS selector String.\n     */\n    static getDefaultFieldOptions() {\n        return {\n            // importance depend on validation results\n            fieldShowState: true, // Shows state on true, Removes state on false\n            messageShow: true, // Shows message on true and invalid result\n\n            messageLocation: null,\n            fieldIdForAriaUsage: null,\n\n            preferHTMLValidatorMessage: true,\n\n            // this is set by validator\n            // does not depend on validation result\n            setByValidatorOnly: {\n                fieldShowStateValidSel: null,\n                fieldShowStateInvalidSel: null,\n                fieldRemoveStateSel: null\n            }\n\n        };\n    }\n\n    /**\n     * Manages aria status of field (WCAG).\n     * @see https://www.w3.org/TR/WCAG20-TECHS/ARIA21.html\n     * used only if validation result is false\n     * @param {Object} field - Reference to dom object.\n     * @param {String|null} fieldIdForAriaUsage - This could be necessary to define\n     * if one message is used for several form fields.\n     */\n    setStatusInvalidAria( field, fieldIdForAriaUsage ) {\n        var fieldUse = field;\n        if ( fieldIdForAriaUsage !== null ) {\n            fieldUse = document.getElementById( fieldIdForAriaUsage );\n        }\n        var id = this.getMessageId( fieldUse );\n        field.setAttribute( 'aria-invalid', 'true' );\n        field.setAttribute( 'aria-describedby', id );\n    }\n\n    /**\n     * Manages aria status of field (WCAG).\n     * @see https://www.w3.org/TR/WCAG20-TECHS/ARIA21.html\n     * @param {Object} field - Dom reference.\n     */\n    removeStatusAria( field ) {\n        field.removeAttribute( 'aria-invalid' );\n        field.removeAttribute( 'aria-describedby' );\n    }\n\n    /**\n     * Removes status classes and aria attributes of a field.\n     * @param {Object} field Reference to dom object.\n     */\n    removeStatus( field ) {\n        field.classList.remove( this.options.fieldErrorClass );\n        field.classList.remove( this.options.fieldSuccessClass );\n        this.removeStatusAria( field );\n    }\n\n    /**\n     *\n     * @param {Object} field Dom reference of field.\n     * @param {Boolean} valid The status type handle.\n     * @param {String} fieldIdForAriaUsage\n     */\n    setStatus( field, valid, fieldIdForAriaUsage ) {\n        var validErrorClass = this.options.fieldErrorClass;\n        var validSuccessClass = this.options.fieldSuccessClass;\n        if ( valid ) {\n            field.classList.add( validSuccessClass );\n            field.classList.remove( validErrorClass );\n            this.removeStatusAria( field );\n        } else {\n            field.classList.add( validErrorClass );\n            field.classList.remove( validSuccessClass );\n            this.setStatusInvalidAria( field, fieldIdForAriaUsage );\n        }\n    }\n\n    /**\n     *\n     * @param {String} selector - CSS selector.\n     * @param {Boolean} status - The status to show.\n     */\n    setStatusBySelector( selector, status ) {\n        if ( selector !== null ) {\n            var fields = document.querySelectorAll( selector );\n            Array.prototype.forEach.call( fields, function( field ) {\n                this.setStatus( field, status, null );\n            }.bind( this ) );\n        }\n    }\n\n\n    /**\n     * Removes staus classes and aria attributes of dom elements.\n     * @param {String} selector - CSS selector to get dom element list.\n     */\n    removeStatusBySelector( selector ) {\n        if ( selector !== null ) {\n            var fields = document.querySelectorAll( selector );\n            Array.prototype.forEach.call( fields, function( field ) {\n                this.removeStatus( field );\n            }.bind( this ) );\n        }\n    }\n\n    /**\n     * Returns the message id.\n     * @param {Object} field - Reference to dom element.\n     * @return {String}\n     */\n    getMessageId( field ) {\n        return 'validation-message-' + field.id;\n    }\n\n    /**\n     *\n     * @param {Object} field - Reference to dom element.\n     * @returns {Object} - Reference to dom element.\n     */\n    getDefaultInsertLoc( field ) {\n        var attr = field.getAttribute( 'type' );\n        var insertLoc = attr !== 'checkbox' && attr !== 'radio' ? field.previousElementSibling || field :\n            field.parentNode;\n        return insertLoc;\n    }\n\n    /**\n     * Checks messageLocation data for its validity\n     * @example\n     * \"messageLocation\": [ { \"minWidth\": 0, \"insertTargetSelector\": \"[for=\\\"nameWithFeedbackDisplay\\\"]\" } ]\n     * @param {null|String} messageLocation\n     */\n    static checkMessageLocationDataFormat( messageLocation ) {\n\n        if ( messageLocation !== null && !Array.isArray( messageLocation ) ) {\n            throw new TypeError( 'messageLocation should be null or of type Array' );\n        }\n\n        if ( Array.isArray( messageLocation ) ) {\n            var length = messageLocation.length;\n            var bP;\n            for ( var i = 0; i < length; i++ ) {\n                bP = messageLocation[ i ];\n\n                if ( typeof bP.minWidth !== 'number' ) {\n                    throw new TypeError( 'messageLocation needs for each entry a minWidth property of type Number' );\n                }\n\n                if ( typeof bP.insertTargetSelector !== 'string' ) {\n                    throw new TypeError( 'messageLocation needs for each entry ' +\n                        'a insertTargetSelector property of type String' );\n                }\n\n                var insertLoc = document.querySelector( bP.insertTargetSelector );\n                if ( insertLoc === null ) {\n                    throw new TypeError(\n                        'messageLocation needs for each entry a insertTargetSelector not resulting in null' );\n                }\n\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {Object} messageLocation\n     * @returns {Object|null} - Breakpoint depended message location data.\n     * If breakpoint is matched all properties defined in HTML for this breakpoint (via min-width property)\n     * are returned otherwise null is returned.\n     * @example\n     * {\n     * \"minWidth\": 750,\n     * \"insertTargetSelector\": \"#name-name-second-insert-point\",\n     * \"layoutContainerIdOuter\": \"#validation-message-layout-name-name-second\",\n     * \"layoutContainerIdNrInner\": 1\n     * }\n     */\n    getBreakpointMessageInfoLocationData( messageLocation ) {\n        var validBp = null;\n        if ( messageLocation !== null ) {\n            var length = messageLocation.length;\n            var matchMedia;\n            var bP;\n            for ( var i = 0; i < length; i++ ) {\n                bP = messageLocation[ i ];\n                matchMedia = '(min-width:' + bP.minWidth + 'px)';\n                if ( window.matchMedia( matchMedia ).matches ) {\n                    validBp = bP;\n                }\n            }\n        }\n\n        return validBp;\n    }\n\n    /**\n     * Manages where to place the validator message.\n     * @param {Object} field - Reference to dom element.\n     * @param {Object} messageLocation\n     * @returns {Object}\n     * @property {Object} insertLoc - Reference to dom element.\n     * @property {Object} breakpointData {@link getBreakpointMessageInfoLocationData}\n     */\n    getMessageInsertLocationData( field, messageLocation ) {\n        var validBp = this.getBreakpointMessageInfoLocationData( messageLocation );\n        var insertLoc;\n\n        var infoData = {};\n\n        if ( validBp !== null ) {\n            insertLoc = document.querySelector( validBp.insertTargetSelector );\n        }\n\n        if ( validBp === null || insertLoc === null ) {\n            insertLoc = this.getDefaultInsertLoc( field );\n        }\n\n        infoData.insertLoc = insertLoc;\n        infoData.breakpointData = validBp;\n\n        return infoData;\n    }\n\n    /**\n     * Removes message and according aria attribute of given field.\n     * @param {Object} field - Reference to dom element.\n     */\n    removeMessageAndAccordingAriaAttrOfField( field ) {\n        var message = document.getElementById( this.getMessageId( field ) );\n        if ( message !== null ) {\n            message.parentNode.removeChild( message );\n            field.removeAttribute( 'aria-describedby' );\n        }\n    }\n\n    /**\n     *\n     * @param {Object} field - Reference to dom element.\n     * @param {String} message - The error message.\n     * @param {null|Array} messageLocation\n     */\n    showMessage( field, message, messageLocation ) {\n        this.removeMessageAndAccordingAriaAttrOfField( field );\n        var html = this.options.messageTemplate.replace( '{{ id }}',\n            this.getMessageId( field ) ).replace( '{{ id-for }}', field.id )\n            .replace( '{{ message }}', message );\n\n        var insertLocData = this.getMessageInsertLocationData( field, messageLocation );\n\n        if ( typeof this.options.messageCreateFunction === 'function' ) {\n            this.options.messageCreateFunction( insertLocData, html );\n        } else {\n            insertLocData.insertLoc.insertAdjacentHTML( 'beforebegin', html );\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/feedbackDisplay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "FeedbackDisplay",
    "memberof": "src/validation/formValidation/feedbackDisplay.js",
    "static": true,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/feedbackDisplay.js",
    "importStyle": "{FeedbackDisplay}",
    "description": "This Class provides display functionality.\nIs handles display of error messages and validation states of each field.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{@link getOptions}"
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "options",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#options",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#getOptions",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'validation-error'",
        "defaultRaw": "'validation-error'",
        "name": "fieldErrorClass",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'validation-success'",
        "defaultRaw": "'validation-success'",
        "name": "fieldSuccessClass",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "look at getOptions-src-code, could not escape curly braces",
        "defaultRaw": "look at getOptions-src-code, could not escape curly braces",
        "name": "messageTemplate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "messageCreateFunction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getDefaultFieldOptions",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay.getDefaultFieldOptions",
    "access": "public",
    "description": "The Default display options for each field.",
    "lineNumber": 79,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldShowState",
        "description": ": true - Sets display actions concerning each field directly.\nShows state on true, removes state on false."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "messageShow",
        "description": ": true - Enables displaying of message of field.\nShows message on true and invalid result."
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "messageLocation",
        "description": ": null"
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldIdForAriaUsage",
        "description": ": null"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "preferHTMLValidatorMessage",
        "description": ": true - Enables prefering message given in HTML over message\ngiven by validator."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "setByValidatorOnly",
        "description": "Set by validator. Usage does not depend on validation result.\nThese declarations are taken to operate field state actions."
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "setByValidatorOnly.fieldShowStateValidSel",
        "description": "The given validator should sent a valid CSS selector String."
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "setByValidatorOnly.fieldShowStateInvalidSel",
        "description": "The given validator should sent a valid CSS selector String."
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "setByValidatorOnly.fieldRemoveStateSel",
        "description": "The given validator should sent a valid CSS selector String."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "This data is used in {@link getValidationFieldConfig}."
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "setStatusInvalidAria",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#setStatusInvalidAria",
    "access": "public",
    "description": "Manages aria status of field (WCAG).",
    "see": [
      "https://www.w3.org/TR/WCAG20-TECHS/ARIA21.html\nused only if validation result is false"
    ],
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom object."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldIdForAriaUsage",
        "description": "This could be necessary to define\nif one message is used for several form fields."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "removeStatusAria",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#removeStatusAria",
    "access": "public",
    "description": "Manages aria status of field (WCAG).",
    "see": [
      "https://www.w3.org/TR/WCAG20-TECHS/ARIA21.html"
    ],
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Dom reference."
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "removeStatus",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#removeStatus",
    "access": "public",
    "description": "Removes status classes and aria attributes of a field.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "setStatus",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#setStatus",
    "access": "public",
    "description": "",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Dom reference of field."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "valid",
        "description": "The status type handle."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldIdForAriaUsage",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "setStatusBySelector",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#setStatusBySelector",
    "access": "public",
    "description": "",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS selector."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The status to show."
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "removeStatusBySelector",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#removeStatusBySelector",
    "access": "public",
    "description": "Removes staus classes and aria attributes of dom elements.",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS selector to get dom element list."
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "getMessageId",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#getMessageId",
    "access": "public",
    "description": "Returns the message id.",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getDefaultInsertLoc",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#getDefaultInsertLoc",
    "access": "public",
    "description": "",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Reference to dom element."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Reference to dom element."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "checkMessageLocationDataFormat",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay.checkMessageLocationDataFormat",
    "access": "public",
    "description": "Checks messageLocation data for its validity",
    "examples": [
      "\"messageLocation\": [ { \"minWidth\": 0, \"insertTargetSelector\": \"[for=\\\"nameWithFeedbackDisplay\\\"]\" } ]"
    ],
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "null",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "messageLocation",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getBreakpointMessageInfoLocationData",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#getBreakpointMessageInfoLocationData",
    "access": "public",
    "description": "",
    "examples": [
      "{\n\"minWidth\": 750,\n\"insertTargetSelector\": \"#name-name-second-insert-point\",\n\"layoutContainerIdOuter\": \"#validation-message-layout-name-name-second\",\n\"layoutContainerIdNrInner\": 1\n}"
    ],
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null} - Breakpoint depended message location data.\nIf breakpoint is matched all properties defined in HTML for this breakpoint (via min-width property)\nare returned otherwise null is returned."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "messageLocation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": "Breakpoint depended message location data.\nIf breakpoint is matched all properties defined in HTML for this breakpoint (via min-width property)\nare returned otherwise null is returned."
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getMessageInsertLocationData",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#getMessageInsertLocationData",
    "access": "public",
    "description": "Manages where to place the validator message.",
    "lineNumber": 285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom element."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "messageLocation",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "insertLoc",
        "description": "Reference to dom element."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "breakpointData",
        "description": "{@link getBreakpointMessageInfoLocationData}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "removeMessageAndAccordingAriaAttrOfField",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#removeMessageAndAccordingAriaAttrOfField",
    "access": "public",
    "description": "Removes message and according aria attribute of given field.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom element."
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "showMessage",
    "memberof": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/feedbackDisplay.js~FeedbackDisplay#showMessage",
    "access": "public",
    "description": "",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Reference to dom element."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "null",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "messageLocation",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/validation/formValidation/formValidation.js",
    "content": "import {ValidationServiceDom} from '../validation.service.dom';\n\nimport {Cache} from './cache';\n\nimport {Resolver} from './resolver';\n\nimport {FeedbackDisplay} from './feedbackDisplay';\n\nimport condition from './condition';\nimport {Behaviour} from './behaviour';\n\nimport defaultValidatorRequired from './validators/required';\nimport defaultValidatorEmail from './validators/email';\n\nimport getValidationFields from './getValidationFields';\n\n/**\n * This Class offers form validation via html driven setup combined with customized or default validators\n *\n * @example\n <form id=\"form\">\n\n <input name=\"name\" id=\"name\"\n data-validation='{\n     \"validators\": {\n     \"required\": { \"message\": \"Required \\\"name\\\" not set\" } },\n     \"feedbackDisplay\": {\n        \"messageLocation\": [ { \"minWidth\": 0, \"insertTargetSelector\": \"[for=\\\"name\\\"]\" } ]\n     }\n    }'\n >\n\n <button id=\"submit-btn\" type=\"submit\">Validate Form</button>\n </form>\n\n <script type=\"text/javascript\">\n\n var options = {\n        formId: 'form',\n        caching: false\n    }\n\n var validationService = new FormValidation( options );\n\n var form = document.getElementById( 'form' );\n\n form.addEventListener( 'submit', function( event ) {\n    event.preventDefault();\n\n    validationService.validateForm().then( function( result ) {\n        console.log( '----->validateForm success', result );\n        form.submit();\n    } ).catch( function( result ) {\n        console.log( '----->validateForm fail', result );\n    } );\n\n} );\n\n </script>\n */\nexport class FormValidation {\n\n    /**\n     * @param {Object} options - The options to set. You have to set the form id for a minimal configuration setup.\n     * @param {String} options.formId (default=null} - Id of the form.\n     * @param {Boolean} [options.caching=true] - Enabling/disabling caching of form validation.\n     * @param {Boolean} [options.stopValidationOnFirstFail=true] -\n     * Stops further validation of field if one validator fails.\n     * @param {Function} [options.condition] - (default={@link condition})\n     * This condition function provides a condition for each field validation.\n     * @param {Class} [options.Behaviour] - (default={@link Behaviour})\n     * This Behaviour Class is setting up the validation behaviour for each field.\n     * @param {Object} [options.validators] - (default={@link defaultValidatorRequired}, {@link defaultValidatorEmail})\n     * @param {Object} [options.feedbackDisplayOptions] - (default={@link FeedbackDisplay.getOptions})\n     */\n    constructor( options ) {\n\n        /**\n         *\n         * @type {Object} - merged options\n         */\n        this.options = this.getMergedOptions( options );\n\n        /**\n         * {@link FeedbackDisplay}\n         * @type {Class}\n         */\n        this.feedbackDisplay = new FeedbackDisplay( options.feedbackDisplayOptions );\n\n        /**\n         * {@link Cache}\n         * cache set a to this context to make them public\n         * @type {Class}\n         */\n        this.cache = new Cache( this.options.validationAttr );\n\n        /**\n         * @type {Array} - Field dom references\n         */\n        var fields = this.getValidationFields();\n\n        /**\n         * {@link getValidationConfig}\n         * @type {Object}\n         */\n        this.config = this.getValidationConfig( fields );\n\n        /**\n         * {@link getValidationFieldConfig}\n         * @type {Object}\n         */\n        this.configFields = this.getValidationFieldConfig( fields );\n    }\n\n    /**\n     *\n     * @type {Class} Resolver\n     */\n    setResolver() {\n        this.resolver = new Resolver(\n            this.configFields,\n            this.options.validators,\n            this.feedbackDisplay );\n    }\n\n    /**\n     * Initializes the validation service\n     * and field behaviour.\n     */\n    setValidationAndBehaviour() {\n        /**\n         * {@link ValidationServiceDom}\n         * @type {Class}\n         */\n        this.validation = new ValidationServiceDom(\n            this.config,\n            this.resolver.resolver(),\n            this.options.caching ? this.cache.getValidationCache() : this.cache.getValidationOffCache(),\n            this.options.stopValidationOnFirstFail );\n\n        /**\n         *\n         * @type {Object} behaviour {@link Behaviour}\n         */\n        try {\n            this.behaviour = new this.options.Behaviour(\n                this.options.formId,\n                this.options.validationAttr,\n                this.options.condition,\n                this.configFields,\n                this.validation );\n            this.behaviour.behaviour();\n\n        } catch ( error ) {\n            // console.log( 'options.Behaviour must be a class/prototype to be instanciated of this.behaviour' );\n            throw new Error( 'options.Behaviour must be a class/prototype to be instanciated of this.behaviour' );\n        }\n\n    }\n\n    /**\n     * Does the required setup.\n     * Set in extra part - why?\n     * This allows to manipulate several objects for customization\n     */\n    init() {\n        this.setResolver();\n        this.setValidationAndBehaviour();\n    }\n\n    /**\n     *\n     * @return {Object}\n     * @property {Boolean} caching : true\n     * @property {String} formID : null\n     * @property {String} validationAttr: 'data-validation'\n     * @property {Boolean} stopValidationOnFirstFail : true\n     * @property {Function} condition {@link condition}\n     * @property {Class} Behaviour  {@link behaviour}\n     * @property {Object} validators\n     * @property {Promise} validators.required {@link defaultValidatorRequired}\n     * @property {Promise} validators.email {@link defaultValidatorEmail}\n     * */\n    getDefaultOptions() {\n        return {\n            caching: true,\n            formId: null,\n            validationAttr: 'data-validation',\n            stopValidationOnFirstFail: true,\n            condition: condition,\n            Behaviour: Behaviour,\n\n            validators: {\n                required: defaultValidatorRequired,\n                email: defaultValidatorEmail\n            }\n        };\n    }\n\n    /**\n     * Merges default options given options\n     * @param {Object} options\n     * @returns {Object}\n     */\n    getMergedOptions( options ) {\n        if ( typeof options === 'undefined' || typeof options !== 'object' ) {\n            throw new TypeError( 'Options must be an object.' );\n        }\n\n        if ( typeof options === 'object' ) {\n            if ( typeof options.formId !== 'string' ) {\n                throw new TypeError( 'Options formID must be String.' );\n            }\n        }\n\n        /**\n         * The options merged by default options and param options.\n         * @type {Object}\n         */\n        var opt = Object.assign( this.getDefaultOptions(), options );\n        /**\n         * Merging via assign is not working proper on subobjects.\n         * So we have to merge separately.\n         * @type {Object}\n         */\n        opt.validators = Object.assign( this.getDefaultOptions().validators, options.validators );\n        return opt;\n    }\n\n    /**\n     * @link {getValidationFields}\n     * @returns {Array}\n     */\n    getValidationFields() {\n        return getValidationFields(\n            this.options.formId,\n            this.options.validationAttr,\n            this.options.condition );\n    }\n\n    getFieldData( field ) {\n        var objData = field.getAttribute( this.options.validationAttr );\n        try {\n            objData = JSON.parse( objData );\n        } catch ( error ) {\n            console.log( 'Error while trying to parse objData:' + objData );\n            console.log( 'Error:' + error );\n        }\n        return objData;\n    }\n\n    /**\n     * Fills up validation config of fields via data attributes of fields and Id of each field.\n     * {@link ValidationService}\n     *\n     * @example\n     * <input name=\"name\" id=\"nameId\"\n     *    data-validation='{\n     *           \"validators\": {\"required\": { \"message\": \"This field is required\" }\n     *           }'>\n     *\n     * {\n     *     nameId: {\n     *         required: { message: 'This field is required' }\n     *     }\n     * }\n     * @param {Array} fields - Array of field references to dom\n     * @returns {Object}\n     */\n    getValidationConfig( fields ) {\n        var configService = {};\n\n        fields.forEach( function( field ) {\n            var objData = this.getFieldData( field );\n\n            var validators = {};\n            if ( typeof objData.validators !== 'object' ) {\n                throw new TypeError( 'validators must be of type object' );\n            }\n            Object.keys( objData.validators ).forEach( function( validatorName ) {\n                var obj = {\n                    message: objData.validators[ validatorName ].message\n                };\n                validators[ validatorName ] = obj;\n            } );\n\n            if ( Object.keys( objData.validators ).length < 1 ) {\n                throw new Error( 'no validators specified' );\n            }\n\n            configService[ field.id ] = validators;\n        }.bind( this ) );\n        return configService;\n    }\n\n    /**\n     * Fills up the validation data values\n     * (Id of fields with it's value).\n     * This values are used to validate.\n     * {@link ValidationService.validate},\n     * ({@link ValidationServiceDom.setValueByField},\n     * {@link ValidationService.getValue} )\n     */\n    setValues() {\n        var fieldIdentifiers = Object.keys( this.config );\n        fieldIdentifiers.forEach( function( identifier ) {\n            var el = document.getElementById( identifier );\n            this.validation.setValueByField( el );\n        }.bind( this ) );\n    }\n\n    /**\n     * This function should be called\n     * if any input fields have been added or deleted.\n     * or before a validation of the entire form starts (Its called by {@link validateForm} )\n     */\n    updateConfigAndValuesAndBehaviour() {\n        /**\n         * @type {Array} - Field dom references\n         */\n        var fields = this.getValidationFields();\n        this.config = this.getValidationConfig( fields );\n        this.configFields = this.getValidationFieldConfig( fields );\n        this.validation.setConfig( this.config );\n        this.setValues();\n        this.setResolver();\n        this.validation.setResolver( this.resolver.resolver() );\n        this.behaviour.updateConfigFieldsAndValidation( this.configFields, this.validation );\n        this.behaviour.behaviour();\n    }\n\n    /**\n     * This function is validating the entire form.\n     * @returns {Promise}\n     */\n    validateForm() {\n        return this.validation.validateForm( this.options.formId );\n    }\n\n    /**\n     * The Default field config for each field.\n     * @return {Object} This data is used in {@link getValidationFieldConfig}\n     * @property {null} validators : null\n     * @property {Object} feedbackDisplay {@link FeedbackDisplay.getDefaultFieldOptions}\n     * @property {Boolean} caching : false\n     * @property {Boolean} setEventOnValidation : false\n     * @property {null} sendToValidatorDataGroupSel : null {@link Resolver}\n     * @property {null} behaviourGroupSel : null - used in {@link Behaviour}\n     */\n    getDefaultValidationFieldConfig() {\n        return {\n            validators: null,\n            feedbackDisplay: FeedbackDisplay.getDefaultFieldOptions(),\n            caching: true,\n            setEventOnValidation: false,\n            sendToValidatorDataGroupSel: null,\n            behaviourGroupSel: null\n        };\n    }\n\n    /**\n     * Merges the default field config {@link getDefaultValidationFieldConfig}\n     * for each field with the HTML given config.\n     * @param {Array} fields - Array of field references to dom\n     * @return {Object}\n     * @property {null|Object} validators : null|Object\n     * @property {Object} feedbackDisplay\n     * @property {Boolean} caching : true|false\n     * @property {Boolean} setEventOnValidation : false|true\n     * @property {String} behaviourGroupSel : null|*css selector*\n     *\n     */\n    getValidationFieldConfig( fields ) {\n        var config = {};\n        var configFields = {};\n        fields.forEach( function( field ) {\n            var objData = this.getFieldData( field );\n            var objDataField = this.getDefaultValidationFieldConfig();\n            objDataField.validators = objData.validators;\n            Object.keys( objData ).forEach( function( key ) {\n                if ( key !== 'validators' ) {\n                    if ( key === 'feedbackDisplay' ) {\n                        Object.keys( objData.feedbackDisplay ).forEach( function( key ) {\n                            if ( key === 'messageLocation' ) {\n                                FeedbackDisplay.checkMessageLocationDataFormat( objData.feedbackDisplay[ key ] );\n                            }\n                            objDataField.feedbackDisplay[ key ] = objData.feedbackDisplay[ key ];\n                        }.bind( this ) );\n                    } else {\n                        objDataField[ key ] = objData[ key ];\n                    }\n                }\n            }.bind( this ) );\n\n            configFields[ field.id ] = objDataField;\n        }.bind( this ) );\n        config.fields = configFields;\n        return config.fields;\n    }\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/formValidation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "FormValidation",
    "memberof": "src/validation/formValidation/formValidation.js",
    "static": true,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/formValidation.js",
    "importStyle": "{FormValidation}",
    "description": "This Class offers form validation via html driven setup combined with customized or default validators",
    "examples": [
      "<form id=\"form\">\n\n<input name=\"name\" id=\"name\"\ndata-validation='{\n\"validators\": {\n\"required\": { \"message\": \"Required \\\"name\\\" not set\" } },\n\"feedbackDisplay\": {\n\"messageLocation\": [ { \"minWidth\": 0, \"insertTargetSelector\": \"[for=\\\"name\\\"]\" } ]\n}\n}'\n>\n\n<button id=\"submit-btn\" type=\"submit\">Validate Form</button>\n</form>\n\n<script type=\"text/javascript\">\n\nvar options = {\nformId: 'form',\ncaching: false\n}\n\nvar validationService = new FormValidation( options );\n\nvar form = document.getElementById( 'form' );\n\nform.addEventListener( 'submit', function( event ) {\nevent.preventDefault();\n\nvalidationService.validateForm().then( function( result ) {\nconsole.log( '----->validateForm success', result );\nform.submit();\n} ).catch( function( result ) {\nconsole.log( '----->validateForm fail', result );\n} );\n\n} );\n\n</script>"
    ],
    "lineNumber": 61,
    "interface": false
  },
  {
    "__docId__": 102,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to set. You have to set the form id for a minimal configuration setup."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.formId",
        "description": "(default=null} - Id of the form."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.caching",
        "description": "Enabling/disabling caching of form validation."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.stopValidationOnFirstFail",
        "description": "Stops further validation of field if one validator fails."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.condition",
        "description": "(default={@link condition})\nThis condition function provides a condition for each field validation."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": true,
        "name": "options.Behaviour",
        "description": "(default={@link Behaviour})\nThis Behaviour Class is setting up the validation behaviour for each field."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.validators",
        "description": "(default={@link defaultValidatorRequired}, {@link defaultValidatorEmail})"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.feedbackDisplayOptions",
        "description": "(default={@link FeedbackDisplay.getOptions})"
      }
    ]
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "options",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#options",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "feedbackDisplay",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#feedbackDisplay",
    "access": "public",
    "description": "{@link FeedbackDisplay}",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "cache",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#cache",
    "access": "public",
    "description": "{@link Cache}\ncache set a to this context to make them public",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "config",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#config",
    "access": "public",
    "description": "{@link getValidationConfig}",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "configFields",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#configFields",
    "access": "public",
    "description": "{@link getValidationFieldConfig}",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "setResolver",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#setResolver",
    "access": "public",
    "description": "",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    },
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "resolver",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#resolver",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "setValidationAndBehaviour",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#setValidationAndBehaviour",
    "access": "public",
    "description": "Initializes the validation service\nand field behaviour.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "validation",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#validation",
    "access": "public",
    "description": "{@link ValidationServiceDom}",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "behaviour",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#behaviour",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "init",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#init",
    "access": "public",
    "description": "Does the required setup.\nSet in extra part - why?\nThis allows to manipulate several objects for customization",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getDefaultOptions",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getDefaultOptions",
    "access": "public",
    "description": "",
    "lineNumber": 184,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "caching",
        "description": ": true"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "formID",
        "description": ": null"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validationAttr:",
        "description": "'data-validation'"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "stopValidationOnFirstFail",
        "description": ": true"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "{@link condition}"
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "Behaviour",
        "description": "{@link behaviour}"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validators",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "validators.required",
        "description": "{@link defaultValidatorRequired}"
      },
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "validators.email",
        "description": "{@link defaultValidatorEmail}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getMergedOptions",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getMergedOptions",
    "access": "public",
    "description": "Merges default options given options",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getValidationFields",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getValidationFields",
    "access": "public",
    "description": "",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "{getValidationFields}"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "getFieldData",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getFieldData",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getValidationConfig",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getValidationConfig",
    "access": "public",
    "description": "Fills up validation config of fields via data attributes of fields and Id of each field.\n{@link ValidationService}",
    "examples": [
      "<input name=\"name\" id=\"nameId\"\n   data-validation='{\n          \"validators\": {\"required\": { \"message\": \"This field is required\" }\n          }'>\n\n{\n    nameId: {\n        required: { message: 'This field is required' }\n    }\n}"
    ],
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "Array of field references to dom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#setValues",
    "access": "public",
    "description": "Fills up the validation data values\n(Id of fields with it's value).\nThis values are used to validate.\n{@link ValidationService.validate},\n({@link ValidationServiceDom.setValueByField},\n{@link ValidationService.getValue} )",
    "lineNumber": 304,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "updateConfigAndValuesAndBehaviour",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#updateConfigAndValuesAndBehaviour",
    "access": "public",
    "description": "This function should be called\nif any input fields have been added or deleted.\nor before a validation of the entire form starts (Its called by {@link validateForm} )",
    "lineNumber": 317,
    "params": [],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "validateForm",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#validateForm",
    "access": "public",
    "description": "This function is validating the entire form.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getDefaultValidationFieldConfig",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getDefaultValidationFieldConfig",
    "access": "public",
    "description": "The Default field config for each field.",
    "lineNumber": 350,
    "properties": [
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "validators",
        "description": ": null"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "feedbackDisplay",
        "description": "{@link FeedbackDisplay.getDefaultFieldOptions}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "caching",
        "description": ": false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "setEventOnValidation",
        "description": ": false"
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "sendToValidatorDataGroupSel",
        "description": ": null {@link Resolver}"
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "behaviourGroupSel",
        "description": ": null - used in {@link Behaviour}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "This data is used in {@link getValidationFieldConfig}"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getValidationFieldConfig",
    "memberof": "src/validation/formValidation/formValidation.js~FormValidation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/formValidation.js~FormValidation#getValidationFieldConfig",
    "access": "public",
    "description": "Merges the default field config {@link getDefaultValidationFieldConfig}\nfor each field with the HTML given config.",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "Array of field references to dom"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "null",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validators",
        "description": ": null|Object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "feedbackDisplay",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "caching",
        "description": ": true|false"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "setEventOnValidation",
        "description": ": false|true"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "behaviourGroupSel",
        "description": ": null|*css selector*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/validation/formValidation/getValidationFields.js",
    "content": "/**\n * Returns all fields dom references of the form\n * considering the given condition.\n * @param {String} formId\n * @param {String} validationAttr - validation attr (where validation data is stored)\n * @param {Function} condition\n * @return {Array} Collection of dom element references\n * @property {Object} field reference to dom element\n */\nexport default function getValidationFields( formId, validationAttr, condition ) {\n    if ( typeof formId !== 'string' ) {\n        throw new TypeError( 'formId must be of type string' );\n    }\n\n    if ( typeof validationAttr !== 'string' ) {\n        throw new TypeError( 'validationAttr must be of type string' );\n    }\n\n    if ( typeof condition !== 'function' ) {\n        throw new TypeError( 'condition should be of type function' );\n    }\n\n    var form = document.getElementById( formId );\n    if ( form === null ) {\n        throw new TypeError( 'form should not be null' );\n    }\n    var fields = form.querySelectorAll(\n        'input[' + validationAttr + '],select[' + validationAttr + '],textarea[' + validationAttr + ']' );\n\n    var fieldsAry = [];\n    Array.prototype.forEach.call( fields, function( field ) {\n        if ( condition( field ) ) {\n            fieldsAry.push( field );\n        }\n    }.bind( this ) );\n\n    return fieldsAry;\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/getValidationFields.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "getValidationFields",
    "memberof": "src/validation/formValidation/getValidationFields.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/getValidationFields.js~getValidationFields",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/getValidationFields.js",
    "importStyle": "getValidationFields",
    "description": "Returns all fields dom references of the form\nconsidering the given condition.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "formId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "validationAttr",
        "description": "validation attr (where validation data is stored)"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "reference to dom element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Collection of dom element references"
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/validation/formValidation/resolver.js",
    "content": "import dispatchEvent from './dispatchEvent';\n\n/**\n * This Class provides resolver functionality\n *\n */\nexport class Resolver {\n    /**\n     *\n     * @param {Object} configFields\n     * @param {Object} validators\n     * @param {Object} feedbackDisplay\n     */\n    constructor( configFields, validators, feedbackDisplay ) {\n        /**\n         *\n         * @type {Object}\n         */\n        if ( typeof configFields !== 'object' ) {\n            throw new TypeError( 'configField is not of type object' );\n        }\n        this.configFields = configFields;\n\n        /**\n         *\n         * @type {Object}\n         */\n        if ( typeof validators !== 'object' ) {\n            throw new TypeError( 'validators is not of type object' );\n        }\n        this.validators = validators;\n\n        /**\n         *\n         * @type {Object}\n         */\n        if ( typeof feedbackDisplay !== 'object' ) {\n            throw new TypeError( 'feedbackDisplay is not of type object' );\n        }\n        this.feedbackDisplay = feedbackDisplay;\n        /**\n         * {@link dispatchEvent}\n         * @type {Function}\n         */\n        this.dispatchEvent = dispatchEvent;\n    }\n\n    /**\n     * Merges validator feedbackData with HTML given feedbackData (stored in this.configFields) and returns the\n     * resulting data object.\n     * @param {Object} result\n     * @param {Boolean} result.isValid\n     * @param {String} result.message\n     * @param {String} fieldName\n     * @return {Object}\n     * @property {Object} result merged HTML given data\n     * (merged with default feedbackData {@link getValidationFieldConfig} )\n     * and validator feedbackData\n     * @example\n     *\n     * from HTML:\n     * \"feedbackDisplay\": {\n     *   \"fieldShowState\": true\n     * }\n     *\n     * from validator:\n     * result = {\n     *            options: {\n     *                'feedbackDisplay': {\n     *                    \"fieldShowState\": false\n     *                }\n     *            },\n     *            isValid: valid\n     *        }\n\n     */\n    getValidationFeedbackData( result, fieldName ) {\n\n        if ( typeof result !== 'object' ) {\n            throw new TypeError( 'result must be an object' );\n        }\n\n        if ( typeof fieldName !== 'string' ) {\n            throw new TypeError( 'fieldName must be a string' );\n        }\n\n        // get validator feedbackData\n        var configFeedbackDisplayValidator = result.options && result.options.feedbackDisplay ?\n            result.options.feedbackDisplay : {};\n        var configFeedbackDisplay = {};\n\n        Object.keys( this.configFields[ fieldName ].feedbackDisplay ).forEach( function( key ) {\n            configFeedbackDisplay[ key ] =\n                typeof configFeedbackDisplayValidator[ key ] !== 'undefined' ?\n                    typeof this.configFields[ fieldName ].feedbackDisplay[ key ] === 'object' &&\n                    typeof configFeedbackDisplayValidator[ key ] === 'object' ?\n                        Object.assign(\n                            this.configFields[ fieldName ].feedbackDisplay[ key ],\n                            configFeedbackDisplayValidator[ key ]\n                        ) :\n                        configFeedbackDisplayValidator[ key ] :\n                    this.configFields[ fieldName ].feedbackDisplay[ key ];\n\n        }.bind( this ) );\n\n        return configFeedbackDisplay;\n    }\n\n    /**\n     *\n     * @param {Object} setByValidatorOnly\n     */\n    displayActionSetByValidatorOnly( setByValidatorOnly ) {\n        this.feedbackDisplay.setStatusBySelector( setByValidatorOnly.fieldShowStateValidSel, true );\n        this.feedbackDisplay.setStatusBySelector( setByValidatorOnly.fieldShowStateInvalidSel, false );\n        this.feedbackDisplay.removeStatusBySelector( setByValidatorOnly.fieldRemoveStateSel );\n    }\n\n    /**\n     * This function provides validation invalid actions.\n     * @param {Object} result\n     * @param {Boolean} result.isValid\n     * @param {String} result.message\n     * @param {Object} fieldDom\n     * @param {Object} validator\n     * @param {Object} configFeedbackDisplay\n     */\n    displayActionInvalid( result, fieldDom, validator, configFeedbackDisplay ) {\n        var message = typeof validator.message !== 'undefined' &&\n        ( configFeedbackDisplay.preferHTMLValidatorMessage || typeof result.message === 'undefined' ) ?\n            validator.message :\n            ( typeof result.message !== 'undefined' ? result.message : '' );\n\n        if ( configFeedbackDisplay.fieldShowState ) {\n            this.feedbackDisplay.setStatus( fieldDom, false, configFeedbackDisplay.fieldIdForAriaUsage );\n        } else {\n            this.feedbackDisplay.removeStatus( fieldDom );\n        }\n\n        if ( configFeedbackDisplay.messageShow ) {\n            this.feedbackDisplay.showMessage( fieldDom, message,\n                configFeedbackDisplay.messageLocation,\n                fieldDom.id\n            );\n        }\n\n        this.displayActionSetByValidatorOnly( configFeedbackDisplay.setByValidatorOnly );\n    }\n\n    /**\n     * This function provides validation valid actions.\n     *\n     * @param {Object} fieldDom\n     * @param {Object} configFeedbackDisplay\n     */\n    displayActionValid( fieldDom, configFeedbackDisplay ) {\n        if ( configFeedbackDisplay.fieldShowState ) {\n            this.feedbackDisplay.setStatus( fieldDom, true, configFeedbackDisplay.fieldIdForAriaUsage );\n        } else {\n            this.feedbackDisplay.removeStatus( fieldDom );\n        }\n\n        this.feedbackDisplay.removeMessageAndAccordingAriaAttrOfField( fieldDom );\n        this.displayActionSetByValidatorOnly( configFeedbackDisplay.setByValidatorOnly );\n    }\n\n    /**\n     * Collects values of group members of field (set by sendToValidatorDataGroupSel)\n     * to give additional data to the validators\n     *\n     * @param {String} fieldName\n     * @param {Object} configFields\n     *\n     * @return {Object} addInfo\n     * @property {Array} groupMembers\n     * @property {Object} {}\n     * @property {String} id\n     * @propery {String} value\n     */\n    getAddDataOfGroupMembers( fieldName, configFields ) {\n        var fields = document.querySelectorAll( configFields[ fieldName ].sendToValidatorDataGroupSel );\n        var addInfo = [];\n        Array.prototype.forEach.call( fields, function( field ) {\n            addInfo.push( { id: field.id, value: field.value } );\n        } );\n\n        return addInfo;\n    }\n\n\n    /**\n     * This function resolves the validation of each field.\n     * The validation resolver is providing a getValidation function.\n     * The getValidation function is providing a promise object.\n     * This promise object is used inside validation loop in\n     * {@link ValidationService.validate}\n     * @return {Object} - returns a promise object\n     */\n    resolver() {\n        /**\n         * The validation resolver is handling the validators and validation-config\n         * to serve proper validation data to the ValidationService - class.\n         */\n        return {\n            /**\n             * This function is used in {link @validate},\n             * @param {String} validatorName - The name of the validator\n             * @return {Promise} - Returns am promise which is solved in @validate\n             */\n            getValidator: function( validatorName ) {\n\n                return new Promise(\n                    /**\n                     * @param {Function} resolve\n                     */\n                    function( resolve ) {\n\n                        resolve(\n                            /**\n                             *  This function is giving back via \"resolve\" to {@link validate}\n                             *  and could be taken via \"then\". It's executed in {@link validate}.\n                             */\n\n                            /**\n                             * @param {String} value\n                             * @param {Object} validator\n                             * @param {Object} validationService\n                             * @param {String} fieldName\n                             * @return {Promise}\n                             */\n                            function( value, validator, validationService, fieldName ) {\n                                /**\n                                 * @param {Function} resolve\n                                 * @param {Function} reject\n                                 */\n                                return new Promise( function( resolve, reject ) {\n                                    var fieldDom = document.getElementById( fieldName );\n\n                                    var sendToValidatorAddData = {\n                                        // e.g.: {\"message\": 'Required \"name\" not set'}\n                                        domConfigData: this.configFields[ fieldName ].validators[ validatorName ]\n                                    };\n\n                                    if ( this.configFields[ fieldName ].sendToValidatorDataGroupSel !== null ) {\n                                        sendToValidatorAddData.groupData =\n                                            this.getAddDataOfGroupMembers( fieldName, this.configFields );\n                                    }\n\n                                    if ( typeof this.validators[ validatorName ] ===\n                                        'undefined' ) {\n                                        console.log( 'ERROR: Validator', validatorName, 'not defined' );\n                                    }\n\n                                    this.validators[ validatorName ]( value, sendToValidatorAddData ).\n                                        then( function( result ) {\n\n                                            var configFeedbackDisplay = this.getValidationFeedbackData(\n                                                result, fieldName );\n                                            this.displayActionValid( fieldDom, configFeedbackDisplay,\n                                                this.feedbackDisplay );\n\n                                            if ( this.configFields[ fieldName ].setEventOnValidation ) {\n                                                this.dispatchEvent( fieldDom, true );\n                                            }\n\n                                            resolve(\n                                                {\n                                                    isValid: true\n                                                }\n                                            );\n\n                                        }.bind( this ) ).catch( function( result ) {\n\n\n                                            var configFeedbackDisplay = this.getValidationFeedbackData( result,\n                                                fieldName );\n\n                                            this.displayActionInvalid( result, fieldDom, validator,\n                                                configFeedbackDisplay );\n\n                                            if ( this.configFields[ fieldName ].setEventOnValidation ) {\n                                                this.dispatchEvent( fieldDom, false );\n                                            }\n\n                                            reject(\n                                                {\n                                                    isValid: false\n                                                }\n                                            );\n\n                                        }.bind( this ) );\n\n                                }.bind( this ) );\n                            }.bind( this ) );\n                    }.bind( this ) );\n            }.bind( this )\n        };\n    }\n\n}\n\n\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/resolver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "Resolver",
    "memberof": "src/validation/formValidation/resolver.js",
    "static": true,
    "longname": "src/validation/formValidation/resolver.js~Resolver",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/resolver.js",
    "importStyle": "{Resolver}",
    "description": "This Class provides resolver functionality",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configFields",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validators",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "feedbackDisplay",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "configFields",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#configFields",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "validators",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#validators",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "feedbackDisplay",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#feedbackDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "dispatchEvent",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#dispatchEvent",
    "access": "public",
    "description": "{@link dispatchEvent}",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getValidationFeedbackData",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#getValidationFeedbackData",
    "access": "public",
    "description": "Merges validator feedbackData with HTML given feedbackData (stored in this.configFields) and returns the\nresulting data object.",
    "examples": [
      "\nfrom HTML:\n\"feedbackDisplay\": {\n  \"fieldShowState\": true\n}\n\nfrom validator:\nresult = {\n           options: {\n               'feedbackDisplay': {\n                   \"fieldShowState\": false\n               }\n           },\n           isValid: valid\n       }"
    ],
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "result.isValid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "result.message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "merged HTML given data\n(merged with default feedbackData {@link getValidationFieldConfig} )\nand validator feedbackData"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "displayActionSetByValidatorOnly",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#displayActionSetByValidatorOnly",
    "access": "public",
    "description": "",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "setByValidatorOnly",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "displayActionInvalid",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#displayActionInvalid",
    "access": "public",
    "description": "This function provides validation invalid actions.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "result.isValid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "result.message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldDom",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validator",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configFeedbackDisplay",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "displayActionValid",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#displayActionValid",
    "access": "public",
    "description": "This function provides validation valid actions.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldDom",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configFeedbackDisplay",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getAddDataOfGroupMembers",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#getAddDataOfGroupMembers",
    "access": "public",
    "description": "Collects values of group members of field (set by sendToValidatorDataGroupSel)\nto give additional data to the validators",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@propery",
        "tagValue": "{String} value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "configFields",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "groupMembers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "{}",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "addInfo"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "resolver",
    "memberof": "src/validation/formValidation/resolver.js~Resolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/formValidation/resolver.js~Resolver#resolver",
    "access": "public",
    "description": "This function resolves the validation of each field.\nThe validation resolver is providing a getValidation function.\nThe getValidation function is providing a promise object.\nThis promise object is used inside validation loop in\n{@link ValidationService.validate}",
    "lineNumber": 199,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns a promise object"
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/validation/formValidation/validators/email.js",
    "content": "/**\n *\n * @param {String} value\n * @returns {Promise}\n */\nexport default function email( value ) {\n    return new Promise( function( resolve, reject ) {\n        // eslint-disable-next-line\n        var regE = new RegExp( [ '^(([^<>()[\\\\]\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\.,;:\\\\s@\\\"]+)*)',\n            '|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.',\n            // eslint-disable-next-line\n            '[0-9]{1,3}\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+',\n            '[a-zA-Z]{2,}))$' ].join( '' ) );\n        var valid = regE.test( value );\n\n        if ( valid ) {\n            resolve( {\n                isValid: valid\n            } );\n        } else {\n            reject( {\n                isValid: valid,\n                message: 'Enter a valid email, please.'\n            } );\n        }\n\n    } );\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/validators/email.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "email",
    "memberof": "src/validation/formValidation/validators/email.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/validators/email.js~email",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/validators/email.js",
    "importStyle": "email",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/validation/formValidation/validators/required.js",
    "content": "/**\n * The required validator.\n * @param {String} value\n * @returns {Promise}\n */\nexport default function required( value ) {\n    return new Promise( function( resolve, reject ) {\n        var valid = typeof value === 'string' && value !== '' ? value.trim() === '' ? false : true : value;\n\n        if ( valid ) {\n            resolve( {\n                isValid: true\n            } );\n        } else {\n            reject( {\n                isValid: false,\n                message: 'This field is mandatory.'\n            } );\n        }\n    } );\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/formValidation/validators/required.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "required",
    "memberof": "src/validation/formValidation/validators/required.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validation/formValidation/validators/required.js~required",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/formValidation/validators/required.js",
    "importStyle": "required",
    "description": "The required validator.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/validation/validation.service.dom.js",
    "content": "import {ValidationService} from './validation.service';\n\n/**\n * # The validator service ext\n *\n * This Class extends the validation.service\n * configuring the validators and a validationResolver. A config can look like this:\n *\n * @extends ValidationService\n */\nexport class ValidationServiceDom extends ValidationService {\n\n    /**\n     * @param {Object} config\n     * @param {Object} validationResolver\n     * @param {Object} cache\n     * @param {Boolean} stopValidationOnFirstFail\n     * @throws {TypeError}\n     * @constructor\n     */\n    constructor( config, validationResolver, cache, stopValidationOnFirstFail ) {\n        super( config, validationResolver, cache, stopValidationOnFirstFail );\n    }\n\n    /**\n     * Set one value by field\n     *\n     * @param {Object} field\n     */\n    setValueByField( field ) {\n        if ( !( field instanceof HTMLInputElement ||\n            field instanceof HTMLSelectElement ||\n            field instanceof HTMLTextAreaElement )\n        ) {\n            throw new TypeError( 'The field parameter must be instance of ' +\n                'HTMLInputElement, HTMLSelectElement or  HTMLTextAreaElement' );\n        }\n        var name = field.id;\n        var attr = field.getAttribute( 'type' );\n        var value = attr === 'checkbox' || attr === 'radio' ? ( field.checked ? true : false ) : field.value;\n        /**\n         * {@link setValue}\n         */\n        super.setValue( name, value );\n    }\n\n\n}\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/validation.service.dom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "ValidationServiceDom",
    "memberof": "src/validation/validation.service.dom.js",
    "static": true,
    "longname": "src/validation/validation.service.dom.js~ValidationServiceDom",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/validation.service.dom.js",
    "importStyle": "{ValidationServiceDom}",
    "description": "# The validator service ext\n\nThis Class extends the validation.service\nconfiguring the validators and a validationResolver. A config can look like this:",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/validation.service.dom.js~ValidationServiceDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.dom.js~ValidationServiceDom#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validationResolver",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cache",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "stopValidationOnFirstFail",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "setValueByField",
    "memberof": "src/validation/validation.service.dom.js~ValidationServiceDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.dom.js~ValidationServiceDom#setValueByField",
    "access": "public",
    "description": "Set one value by field",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/validation/validation.service.js",
    "content": "/**\r\n * # The validator service\r\n *\r\n * This service dispatches several validations to the right validators. It accepts a config for each field\r\n * configuring the validators and a validationResolver. A config can look like this:\r\n *\r\n * ```\r\n * {\r\n *     fieldA: {\r\n *         required: { message: 'This field is required' },\r\n *         email: { message: 'This field must contain a valid email address' }\r\n *         ajax: { endpoint: 'http://localhost/validation' }\r\n *     },\r\n *     fieldB: {\r\n *         required: { message: 'Field B is required' }\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * The validation resolver must implement a getValidator method accepting the validator name as an argument\r\n * validator is passed.\r\n *\r\n * ## Validators\r\n *\r\n * A validator must implement a certain interface. This interface is not checked, so be sure to implement it\r\n * the right way.\r\n *\r\n * There are four parameters passed to the validator:\r\n *\r\n * 1. The value which should be validate\r\n * 2. The config for the validator coming straight from the service config\r\n * 3. The validator service itself to eventually do validation on dependencies\r\n * 4. The fieldname to handle field propertys in validator (e.g. visibility)\r\n *\r\n * The validator **must** return a promise which is resolved when the validation is valid and rejects\r\n * when the validation fails. The results must be passed to the resolve/reject function as an object looking\r\n * like this:\r\n *\r\n * ```\r\n * {\r\n *     isValid: false,\r\n *     message: 'This is a validation message which can come via config'\r\n * }\r\n * ```\r\n *\r\n * When the validation in a validator is successful the the `isValid` property should be true and there is\r\n * no message. For an invalid validation the message is helpful for the user.\r\n */\r\nexport class ValidationService {\r\n\r\n    /**\r\n     * @param {Object} config\r\n     * @param {Object} validationResolver\r\n     * @param {Object} cache\r\n     * @param {Boolean} stopValidationOnFirstFail\r\n     * @throws {TypeError}\r\n     * @constructor\r\n     */\r\n    constructor( config, validationResolver, cache, stopValidationOnFirstFail ) {\r\n        if ( config === undefined || typeof config !== 'object' || Array.isArray( config ) ) {\r\n            throw new TypeError( 'Config must be an object' );\r\n        }\r\n\r\n        if ( typeof validationResolver.getValidator !== 'function' ) {\r\n            throw new TypeError( 'The validation resolver must implement the getValidator function' );\r\n        }\r\n\r\n        if ( typeof cache.getValue !== 'function' || typeof cache.setValue !== 'function' ) {\r\n            throw new TypeError( 'The cache must be implement the cache interface' );\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.stopValidationOnFirstFail = false;\r\n        if ( typeof stopValidationOnFirstFail !== 'undefined' && typeof stopValidationOnFirstFail !== 'boolean' ) {\r\n            throw new TypeError( 'The stopValidationOnFirstFail param must be of type boolean if set.' );\r\n        } else if ( typeof stopValidationOnFirstFail !== 'undefined' ) {\r\n            this.stopValidationOnFirstFail = stopValidationOnFirstFail ;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.validationResolver = validationResolver;\r\n        /**\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.config = config;\r\n        /**\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.data = {};\r\n        /**\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.cache = cache;\r\n    }\r\n\r\n    /**\r\n     * Set config\r\n     *\r\n     * @param {Object} config\r\n     */\r\n    setConfig( config ) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Set resolver\r\n     *\r\n     * @param {Object} validationResolver\r\n     */\r\n    setResolver( validationResolver ) {\r\n        this.validationResolver = validationResolver;\r\n    }\r\n\r\n    /**\r\n     * Set all values\r\n     * @example\r\n     * validationService.setValues( {\r\n            name: 'Elvis',\r\n            nickname: 'The Pelvis'\r\n        } );\r\n     *\r\n     * @param {Object} data\r\n     */\r\n    setValues( data ) {\r\n        this.data = data;\r\n    }\r\n\r\n    /**\r\n     * Set one value\r\n     * @example\r\n     * validationService.setValue( 'name', 'Elvis' );\r\n     *\r\n     * @param {String} name\r\n     * @param {String|Array} value\r\n     */\r\n    setValue( name, value ) {\r\n        this.data[ name ] = value;\r\n    }\r\n\r\n    /**\r\n     * Returns all values\r\n     *\r\n     * @return {Object}\r\n     */\r\n    getValues() {\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n     * Returns one specific value\r\n     *\r\n     * @param {String} name\r\n     * @return {String/Array}\r\n     */\r\n    getValue( name ) {\r\n        return this.data[ name ];\r\n    }\r\n\r\n    /**\r\n     * Returns all configured fields\r\n     *\r\n     * @return {Array}\r\n     */\r\n    getFields() {\r\n        return Object.keys( this.config );\r\n    }\r\n\r\n    /**\r\n     * Validate one field\r\n     *\r\n     * @param {String} field\r\n     * @param {String} formId\r\n     * @return {Promise}\r\n     */\r\n    validate( field, formId ) {\r\n        return new Promise( function( resolve, reject ) {\r\n            var validators = this.config[ field ];\r\n\r\n            if ( validators === undefined ) {\r\n                resolve( { isValid: true } );\r\n            }\r\n\r\n            var validatorNames = Object.keys( validators );\r\n\r\n            var resolvedCount = 0;\r\n            var hasError = false;\r\n\r\n            var validationResults = {};\r\n\r\n            var handleValidationResult = function( validationResult, validatorName ) {\r\n                resolvedCount++;\r\n\r\n                validationResults[ validatorName ] = validationResult;\r\n\r\n                if ( resolvedCount === validatorNames.length && hasError === false ) {\r\n                    resolve( {\r\n                        isValid: true,\r\n                        results: validationResults\r\n                    } );\r\n                } else if ( resolvedCount === validatorNames.length ||\r\n                    ( this.stopValidationOnFirstFail && hasError ) ) {\r\n                    reject( {\r\n                        isValid: false,\r\n                        results: validationResults\r\n                    } );\r\n                } else {\r\n                    if ( ( !this.stopValidationOnFirstFail || hasError === false ) ) {\r\n                        handleValidation( validatorNames[ resolvedCount ] );\r\n                    }\r\n                }\r\n            }.bind( this );\r\n\r\n            var value = this.getValue( field );\r\n\r\n            var cacheKey = formId + '.' + field; // TODO: discuss if formId is needed\r\n\r\n            var isCached = this.cache.isCached( cacheKey );\r\n\r\n            var cached = isCached ? this.cache.getValue( cacheKey ) :\r\n                {\r\n                    value: value,\r\n                    results: {}\r\n                };\r\n\r\n            var handleValidation = function( validatorName ) {\r\n\r\n                if ( isCached && cached.value === value && cached.results[ validatorName ] !== undefined ) {\r\n                    if ( cached.results[ validatorName ].isValid === false ) {\r\n                        hasError = true;\r\n                    }\r\n                    handleValidationResult( cached.results[ validatorName ], validatorName );\r\n                    return;\r\n                }\r\n\r\n                cached.value = value;\r\n\r\n                this.validationResolver.getValidator( validatorName ).then( function( validator ) {\r\n\r\n                    return validator(\r\n                        value,\r\n                        validators[ validatorName ],\r\n                        this,\r\n                        field\r\n                    ).then( function( validationResult ) {\r\n                        cached.results[ validatorName ] = validationResult;\r\n                        this.cache.setValue( cacheKey, cached );\r\n\r\n                        handleValidationResult( validationResult, validatorName );\r\n\r\n                    }.bind( this ) ).catch( function( validationResult ) {\r\n                        cached.results[ validatorName ] = validationResult;\r\n                        this.cache.setValue( cacheKey, cached );\r\n\r\n                        hasError = true;\r\n                        handleValidationResult( validationResult, validatorName );\r\n\r\n                    }.bind( this ) );\r\n\r\n                }.bind( this ) );\r\n\r\n\r\n            }.bind( this );\r\n\r\n            handleValidation( validatorNames[ resolvedCount ] );\r\n\r\n        }.bind( this ) );\r\n    }\r\n\r\n    /**\r\n     * Validate the whole form\r\n     *\r\n     * @param {String} formId\r\n     * @return {Promise}\r\n     */\r\n    validateForm( formId ) {\r\n        formId = formId || '';\r\n        return new Promise( function( resolve, reject ) {\r\n            var fieldNames = this.getFields();\r\n\r\n            var resolvedCount = 0;\r\n            var hasError = false;\r\n\r\n            var validationResults = {};\r\n\r\n            var handleValidationResult = function( validationResult, field ) {\r\n                resolvedCount++;\r\n                validationResults[ field ] = validationResult;\r\n\r\n                if ( resolvedCount === fieldNames.length && hasError === false ) {\r\n                    resolve( {\r\n                        isValid: true,\r\n                        results: validationResults\r\n                    } );\r\n                } else if ( resolvedCount === fieldNames.length ) {\r\n                    reject( {\r\n                        isValid: false,\r\n                        results: validationResults\r\n                    } );\r\n                }\r\n            }.bind( this );\r\n\r\n            fieldNames.forEach( function( fieldName ) {\r\n                this.validate( fieldName, formId ).then( function( validationResult ) {\r\n                    handleValidationResult( validationResult, fieldName );\r\n                } ).catch( function( validationResult ) {\r\n                    hasError = true;\r\n                    handleValidationResult( validationResult, fieldName );\r\n                } );\r\n            }.bind( this ) );\r\n        }.bind( this ) );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/src/validation/validation.service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "ValidationService",
    "memberof": "src/validation/validation.service.js",
    "static": true,
    "longname": "src/validation/validation.service.js~ValidationService",
    "access": "public",
    "export": true,
    "importPath": "validation-service/src/validation/validation.service.js",
    "importStyle": "{ValidationService}",
    "description": "# The validator service\n\nThis service dispatches several validations to the right validators. It accepts a config for each field\nconfiguring the validators and a validationResolver. A config can look like this:\n\n```\n{\n    fieldA: {\n        required: { message: 'This field is required' },\n        email: { message: 'This field must contain a valid email address' }\n        ajax: { endpoint: 'http://localhost/validation' }\n    },\n    fieldB: {\n        required: { message: 'Field B is required' }\n    }\n}\n```\n\nThe validation resolver must implement a getValidator method accepting the validator name as an argument\nvalidator is passed.\n\n## Validators\n\nA validator must implement a certain interface. This interface is not checked, so be sure to implement it\nthe right way.\n\nThere are four parameters passed to the validator:\n\n1. The value which should be validate\n2. The config for the validator coming straight from the service config\n3. The validator service itself to eventually do validation on dependencies\n4. The fieldname to handle field propertys in validator (e.g. visibility)\n\nThe validator **must** return a promise which is resolved when the validation is valid and rejects\nwhen the validation fails. The results must be passed to the resolve/reject function as an object looking\nlike this:\n\n```\n{\n    isValid: false,\n    message: 'This is a validation message which can come via config'\n}\n```\n\nWhen the validation in a validator is successful the the `isValid` property should be true and there is\nno message. For an invalid validation the message is helpful for the user.",
    "lineNumber": 49,
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validationResolver",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cache",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "stopValidationOnFirstFail",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "stopValidationOnFirstFail",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#stopValidationOnFirstFail",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "validationResolver",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#validationResolver",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "config",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#config",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "data",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#data",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "cache",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#cache",
    "access": "public",
    "description": "",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "setConfig",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#setConfig",
    "access": "public",
    "description": "Set config",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "setResolver",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#setResolver",
    "access": "public",
    "description": "Set resolver",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "validationResolver",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#setValues",
    "access": "public",
    "description": "Set all values",
    "examples": [
      "validationService.setValues( {\nname: 'Elvis',\nnickname: 'The Pelvis'\n} );"
    ],
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#setValue",
    "access": "public",
    "description": "Set one value",
    "examples": [
      "validationService.setValue( 'name', 'Elvis' );"
    ],
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getValues",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#getValues",
    "access": "public",
    "description": "Returns all values",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#getValue",
    "access": "public",
    "description": "Returns one specific value",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String/Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getFields",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#getFields",
    "access": "public",
    "description": "Returns all configured fields",
    "lineNumber": 173,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "validate",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#validate",
    "access": "public",
    "description": "Validate one field",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "formId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "validateForm",
    "memberof": "src/validation/validation.service.js~ValidationService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validation/validation.service.js~ValidationService#validateForm",
    "access": "public",
    "description": "Validate the whole form",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "formId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# denkstrap-validation-service\n\n> denkwerk validation service\n\n## There are three main classes which are ready to use\n\n- ValidationService (the basic validation service class)\n- ValidationServiceDom (extends ValidationService class and adds basic dom handling)\n- FormValidation (a full customizable html configurable form validation adaption)\n\n## Documentation\n\n- the documentation can be found in dist/esdoc, just download the dist folder an open index.html\n- download the demo page (dist is needed although ) to watch the demos\n\n## Just want to use the form validation code?\n\nDownload formValidation.js, located in folder dist/validation/formValidation.js and embed it.\n\n    <form id=\"form\">\n        <label for=\"name\">Name</label>\n        <input name=\"name\" id=\"name\" data-validation='{\n        \"validators\": {\n        \"required\": {\"message\": \"Enter your name, please.\"}\n        }\n        }'>\n        <button type=\"submit>send form</button>\n    </form>\n\n    <script>\n        var formValidation = new FormValidation( { formId: 'form'} );\n\n        var form = document.getElementById( form );\n        form.addEventListener( 'submit', function( event ) {\n            event.preventDefault();\n            validationService.validateForm().then( function( result ) {\n               form.submit();\n            } ).catch( function( result ) {\n                console.log( '----->validateForm fail', result );\n            } );\n        } );\n    </script>\n\nYou have to include the according polyfills in folder \"demo/polyfills\"\nto make it running in all tested browsers (IE10, Android 5, Chrome, Safari, Firefox).\n\nHave a look on the docs and demo page for further options and examples.\n\n\n## Want to help developing the code?\n\n### Requirements\n\nThere are a few prerequisites for this repository:\n\n- [nvm](https://github.com/creationix/nvm) on Mac and Linux, [nvmw](https://github.com/hakobera/nvmw) or [nvm-windows](https://github.com/coreybutler/nvm-windows) on Windows\n- As an alternative you have node.js version 6.0 as your systems default node.js version\n  (Version 6.0 of node is necessary to run ESDoc.)\n\n### Install with yarn\n\n    yarn install\n\n### Work on the sources\n\nsources are located here: \"src/\"\n\n### Work on tests\n\nTests are located here; \"test/\".<br>\nTest files must have same file name as source files plus \".spec\" extension.\n\n#### console commands\n\n- yarn run watch (runs the watch task)\n- yarn run test (runs the karma tests\n- yarn lint-fix (runs ESLint with auto-error-fixing)\n- yarn doc (runs ESDoc)\n\nCode coverage ist build within test task. Coverage output is located in folder\n\"artifacts/test/coverage\".\n\n\n\n\n",
    "longname": "D:\\work\\denkstrap-tooltip-belt-validation\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"validation-service\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"A validation service to run form inputs against validators.\",\r\n  \"main\": \"dist/validation/validation.service.js\",\r\n  \"author\": \"Marius Büscher <marius.buescher@denkwerk.com>\",\r\n  \"license\": \"MIT\",\r\n  \"scripts\": {\r\n    \"test\": \"karma start --single-run\",\r\n    \"doc\": \"esdoc\",\r\n    \"watch\": \"webpack --progress --watch --colors\",\r\n    \"start\": \"webpack-dev-server TODO: The web-dev-server is not running proper, have a look on the outcommented webpack.config part\",\r\n    \"build\": \"webpack\",\r\n    \"lint\": \"eslint src/**\",\r\n    \"lint-report\": \"eslint src/** -o artifacts/eslint.html -f html\",\r\n    \"lint-fix\": \"eslint src/** --fix\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"axe-core\": \"^2.6.1\",\r\n    \"babel-core\": \"^6.24.1\",\r\n    \"babel-istanbul\": \"^0.12.2\",\r\n    \"babel-loader\": \"^7.0.0\",\r\n    \"babel-plugin-istanbul\": \"^4.1.5\",\r\n    \"babel-polyfill\": \"^6.23.0\",\r\n    \"babel-preset-es2015\": \"^6.24.1\",\r\n    \"esdoc\": \"^1.0.4\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^4.12.0\",\r\n    \"eslint-loader\": \"^1.9.0\",\r\n    \"glob\": \"^7.1.2\",\r\n    \"istanbul\": \"^0.4.5\",\r\n    \"istanbul-instrumenter-loader\": \"^3.0.0\",\r\n    \"jasmine\": \"^2.6.0\",\r\n    \"jasmine-core\": \"^2.6.2\",\r\n    \"karma\": \"^1.7.0\",\r\n    \"karma-babel-preprocessor\": \"^6.0.1\",\r\n    \"karma-chrome-launcher\": \"^2.2.0\",\r\n    \"karma-coverage\": \"^1.1.1\",\r\n    \"karma-firefox-launcher\": \"^1.1.0\",\r\n    \"karma-fixture\": \"^0.2.6\",\r\n    \"karma-html2js-preprocessor\": \"^1.1.0\",\r\n    \"karma-ie-launcher\": \"^1.0.0\",\r\n    \"karma-jasmine\": \"^1.1.0\",\r\n    \"karma-jenkins-reporter\": \"^0.0.2\",\r\n    \"karma-json-fixtures-preprocessor\": \"0.0.6\",\r\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\r\n    \"karma-safari-launcher\": \"^1.0.0\",\r\n    \"karma-sinon\": \"^1.0.5\",\r\n    \"karma-tape-reporter\": \"^1.0.3\",\r\n    \"karma-viewport\": \"^0.4.2\",\r\n    \"karma-webpack\": \"^2.0.3\",\r\n    \"sinon\": \"^2.3.2\",\r\n    \"webpack\": \"^2.6.1\",\r\n    \"webpack-dev-server\": \"^2.9.1\"\r\n  }\r\n}\r\n",
    "longname": "D:\\work\\denkstrap-tooltip-belt-validation\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 170,
    "kind": "testFile",
    "name": "test/cache/cache.service.spec.js",
    "content": "import { Cache } from '../../src/cache/cache.service';\r\n\r\ndescribe( 'Cache', function() {\r\n    it( 'should return false on an empty cache object', function() {\r\n        var cache = new Cache();\r\n        expect( cache.isCached( 'name' ) ).toBe( false );\r\n    } );\r\n\r\n    it( 'should throw an error when the key is not a string', function() {\r\n        var cache = new Cache();\r\n        expect( function () { cache.getValue() } )\r\n            .toThrowError( TypeError, 'Key must be a string' );\r\n    } );\r\n\r\n    it( 'should throw an error when key is not cached', function() {\r\n        var cache = new Cache();\r\n        expect( function () { cache.getValue( 'test' ) } )\r\n            .toThrowError( Error, 'Check cache via isCached method before trying to fetch a value' );\r\n    } );\r\n\r\n    it( 'should return the cached object', function() {\r\n        var cache = new Cache();\r\n        var obj = { value: 'test' };\r\n        cache.setValue( 'test', obj );\r\n        expect( cache.getValue( 'test' ) ).toBe( obj );\r\n    } );\r\n\r\n    it( 'should return false if not cached', function() {\r\n        var cache = new Cache();\r\n        var obj = { value: 'test' };\r\n        cache.setValue( 'test', obj );\r\n        expect( cache.isCached( 'test' ) ).toBeTruthy();\r\n    } );\r\n\r\n} );\r\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/cache/cache.service.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/cache/cache.service.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0",
    "access": null,
    "description": "Cache",
    "lineNumber": 3
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/cache/cache.service.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0.it1",
    "access": null,
    "description": "should return false on an empty cache object",
    "lineNumber": 4
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/cache/cache.service.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0.it2",
    "access": null,
    "description": "should throw an error when the key is not a string",
    "lineNumber": 9
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/cache/cache.service.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0.it3",
    "access": null,
    "description": "should throw an error when key is not cached",
    "lineNumber": 15
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/cache/cache.service.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0.it4",
    "access": null,
    "description": "should return the cached object",
    "lineNumber": 21
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/cache/cache.service.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/cache/cache.service.spec.js~describe0.it5",
    "access": null,
    "description": "should return false if not cached",
    "lineNumber": 28
  },
  {
    "__docId__": 177,
    "kind": "testFile",
    "name": "test/validation/formValidation/behaviour.spec.js",
    "content": "import {Behaviour} from '../../../src/validation/formValidation/behaviour';\nimport {FormValidation} from '../../../src/validation/formValidation/formValidation';\n\n/** @test {Behaviour} */\n\ndescribe( 'behaviour', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n    var formId = 'form';\n    var formValidation;\n    var initForm = function() {\n        formValidation = new FormValidation( { formId: formId } );\n        formValidation.init();\n    }\n\n\n    describe( 'constructor( formId, validationAttr, condition, configFields, validation )', function() {\n\n        it( 'should throw an error when parameter formId is not of type String', function() {\n            initForm();\n            expect( function() {\n                    new Behaviour(\n                        1,\n                        formValidation.options.validationAttr,\n                        formValidation.options.condition,\n                        formValidation.configFields,\n                        formValidation.validation\n                    );\n                }\n            ).toThrowError( TypeError, 'form id must be of type String' );\n        } );\n\n        it( 'should throw an error when parameter validationAttr is not of type String', function() {\n            initForm();\n            expect( function() {\n                    new Behaviour(\n                        formId,\n                        1,\n                        formValidation.options.condition,\n                        formValidation.configFields,\n                        formValidation.validation\n                    );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when parameter condition is not of type Function', function() {\n            initForm();\n            expect( function() {\n                    new Behaviour(\n                        formId,\n                        formValidation.options.validationAttr,\n                        1,\n                        formValidation.configFields,\n                        formValidation.validation\n                    );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when parameter configFields is not of type Object', function() {\n            initForm();\n            expect( function() {\n                    new Behaviour(\n                        formId,\n                        formValidation.options.validationAttr,\n                        formValidation.options.condition,\n                        1,\n                        formValidation.validation\n                    );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when parameter validation is not of type Object', function() {\n            initForm();\n            expect( function() {\n                    new Behaviour(\n                        formId,\n                        formValidation.options.validationAttr,\n                        formValidation.options.condition,\n                        formValidation.configFields,\n                        1\n                    );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n    } );\n\n    describe( 'behaviour()', function() {\n\n        it( 'should do validation on focus out of field', function( done ) {\n            var html = fixture.load( '/test/fixtures/form.html' );\n\n            var field = document.getElementById( 'name' );\n            field.focus();\n\n            initForm();\n\n            var spy = sinon.spy( formValidation.validation, 'validate' );\n\n            var checkInterval2Set = false;\n            var checkInterval = setInterval( function() {\n                if ( document.activeElement === field && !checkInterval2Set ) {\n                    checkInterval2Set = true;\n                    field.blur();\n                    var checkInterval2 = setInterval( function() {\n                        if ( document.activeElement !== field ) {\n                            sinon.assert.callCount( spy, 1 );\n                            done();\n                            clearInterval( checkInterval );\n                        }\n                    }, 10 )\n                }\n            }, 10 );\n\n        } );\n\n        it( 'should do remove previous set event handler', function( ) {\n            var field = document.getElementById( 'name' );\n            var spy = sinon.spy( field, 'removeEventListener' );\n            initForm();\n            formValidation.behaviour.behaviour();\n            sinon.assert.callCount( spy, 1 );\n        } );\n\n    } );\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/behaviour.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/validation/formValidation/behaviour.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6",
    "access": null,
    "description": "behaviour",
    "lineNumber": 6,
    "testTargets": [
      "Behaviour"
    ]
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "access": null,
    "description": "constructor( formId, validationAttr, condition, configFields, validation )",
    "lineNumber": 20
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7.it8",
    "access": null,
    "description": "should throw an error when parameter formId is not of type String",
    "lineNumber": 22
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7.it9",
    "access": null,
    "description": "should throw an error when parameter validationAttr is not of type String",
    "lineNumber": 36
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7.it10",
    "access": null,
    "description": "should throw an error when parameter condition is not of type Function",
    "lineNumber": 50
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7.it11",
    "access": null,
    "description": "should throw an error when parameter configFields is not of type Object",
    "lineNumber": 64
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe7.it12",
    "access": null,
    "description": "should throw an error when parameter validation is not of type Object",
    "lineNumber": 78
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe13",
    "access": null,
    "description": "behaviour()",
    "lineNumber": 94
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe13.it14",
    "access": null,
    "description": "should do validation on focus out of field",
    "lineNumber": 96
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/validation/formValidation/behaviour.spec.js~describe6.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/behaviour.spec.js~describe6.describe13.it15",
    "access": null,
    "description": "should do remove previous set event handler",
    "lineNumber": 123
  },
  {
    "__docId__": 188,
    "kind": "testFile",
    "name": "test/validation/formValidation/cache.spec.js",
    "content": "import {Cache} from '../../../src/validation/formValidation/cache';\n\n/** @test {Cache} */\n\ndescribe( 'Cache', function() {\n\n    beforeEach(function(){\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    });\n\n\n    describe( 'constructor( validationAttr )', function() {\n\n        it( 'should throw an error on wrong validationAttr type', function() {\n            expect( function() {\n                var cache = new Cache( 1 );\n            } ).toThrowError( TypeError );\n        } );\n\n    } );\n\n    describe( 'getValidationCache()', function() {\n\n        it( 'should cache the value', function() {\n\n            var fieldId = 'name';\n            var formId = 'form';\n            var field = document.getElementById( fieldId );\n            field.value = 'test';\n            var cacheKey = formId + '.' + fieldId;\n            var cached = field.value;\n            var cache = new Cache( 'data-validation' );\n\n            var validationCache = cache.getValidationCache();\n\n            validationCache.setValue( cacheKey, cached );\n\n            // return validationCache.getValue( cacheKey );\n            expect( validationCache.getValue( cacheKey )).toEqual( cached );\n        } );\n\n\n        it( 'should not cache the value', function() {\n\n            var fieldId = 'nameWithFeedbackDisplay';\n            var formId = 'form';\n            var field = document.getElementById( fieldId );\n            field.value = 'test';\n            var cacheKey = formId + '.' + fieldId;\n            var cached = field.value;\n            var cache = new Cache( 'data-validation' );\n\n            var validationCache = cache.getValidationCache();\n\n            validationCache.setValue( cacheKey, cached );\n            expect( !validationCache.isCached( cacheKey )).toBeTruthy();\n        } );\n\n    } );\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/cache.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/validation/formValidation/cache.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16",
    "access": null,
    "description": "Cache",
    "lineNumber": 5,
    "testTargets": [
      "Cache"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/validation/formValidation/cache.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16.describe17",
    "access": null,
    "description": "constructor( validationAttr )",
    "lineNumber": 12
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/validation/formValidation/cache.spec.js~describe16.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16.describe17.it18",
    "access": null,
    "description": "should throw an error on wrong validationAttr type",
    "lineNumber": 14
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/validation/formValidation/cache.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16.describe19",
    "access": null,
    "description": "getValidationCache()",
    "lineNumber": 22
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/validation/formValidation/cache.spec.js~describe16.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16.describe19.it20",
    "access": null,
    "description": "should cache the value",
    "lineNumber": 24
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/validation/formValidation/cache.spec.js~describe16.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/cache.spec.js~describe16.describe19.it21",
    "access": null,
    "description": "should not cache the value",
    "lineNumber": 43
  },
  {
    "__docId__": 195,
    "kind": "testFile",
    "name": "test/validation/formValidation/condition.spec.js",
    "content": "import condition from '../../../src/validation/formValidation/condition';\n/** @test {condition} */\n\ndescribe( 'condition', function() {\n\n    beforeEach(function(){\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    });\n\n    /**\n     * condition( field )\n     */\n    it( 'should throw an error when given parameter is not of type HTMLInputElement', function() {\n        var field = document.getElementById( 'nameNOT-IN-DOM' );\n        expect( function() {\n            condition( field );\n        }).toThrowError( TypeError );\n    } );\n\n    it( 'should give back condition as valid', function() {\n        var field = document.getElementById( 'name' );\n        expect( condition( field ) ).toBeTruthy();\n    } );\n\n    it( 'should give back condition as invalid', function() {\n        var field = document.getElementById( 'nameHidden' );\n        expect( condition( field ) ).not.toBeTruthy();\n    } );\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/condition.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/validation/formValidation/condition.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/condition.spec.js~describe22",
    "access": null,
    "description": "condition",
    "lineNumber": 4,
    "testTargets": [
      "condition"
    ]
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/validation/formValidation/condition.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/condition.spec.js~describe22.it23",
    "access": null,
    "description": "condition( field )",
    "lineNumber": 13
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/validation/formValidation/condition.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/condition.spec.js~describe22.it24",
    "access": null,
    "description": "should give back condition as valid",
    "lineNumber": 20
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/validation/formValidation/condition.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/condition.spec.js~describe22.it25",
    "access": null,
    "description": "should give back condition as invalid",
    "lineNumber": 25
  },
  {
    "__docId__": 200,
    "kind": "testFile",
    "name": "test/validation/formValidation/dispatchEvent.spec.js",
    "content": "import dispatchEvent from '../../../src/validation/formValidation/dispatchEvent';\n/** @test {dispatchEvent} */\n\ndescribe( 'dispatchEvent', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n    describe( 'eventDispatch( fieldDom, isValid )', function() {\n\n        it( 'should throw an error when given parameter fieldDom is not of type HTMLElement', function() {\n            var field = document.getElementById( 'name_DOES_NOT_EXIST' );\n            expect( function() {\n                dispatchEvent( field, true );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when given parameter isValid is not of type Boolean', function() {\n            var field = document.getElementById( 'name' );\n            expect( function() {\n                dispatchEvent( field, 'true' );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should receive a proper event message', function( done ) {\n            var fieldId = 'name';\n            var field = document.getElementById( fieldId );\n            var isValid = false;\n            var receivedEvent;\n            var eventObj = {\n                detail: {\n                    isValid: isValid,\n                    field: field\n                }\n            };\n            var eventName = fieldId + '-validated';\n            field.addEventListener( eventName, function ( event ) {\n                setTimeout( function(){\n                    receivedEvent = event.detail;\n                    expect( receivedEvent ).toEqual( eventObj.detail );\n                    done();\n                },  10);\n            } );\n            dispatchEvent( field, false );\n        } );\n\n    } );\n\n} );",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/dispatchEvent.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/validation/formValidation/dispatchEvent.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/dispatchEvent.spec.js~describe26",
    "access": null,
    "description": "dispatchEvent",
    "lineNumber": 4,
    "testTargets": [
      "dispatchEvent"
    ]
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/validation/formValidation/dispatchEvent.spec.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27",
    "access": null,
    "description": "eventDispatch( fieldDom, isValid )",
    "lineNumber": 10
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27.it28",
    "access": null,
    "description": "should throw an error when given parameter fieldDom is not of type HTMLElement",
    "lineNumber": 12
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27.it29",
    "access": null,
    "description": "should throw an error when given parameter isValid is not of type Boolean",
    "lineNumber": 19
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/dispatchEvent.spec.js~describe26.describe27.it30",
    "access": null,
    "description": "should receive a proper event message",
    "lineNumber": 26
  },
  {
    "__docId__": 206,
    "kind": "testFile",
    "name": "test/validation/formValidation/feedbackDisplay.spec.js",
    "content": "import {FeedbackDisplay} from '../../../src/validation/formValidation/feedbackDisplay';\n/** @test {FeedbackDisplay} */\n\ndescribe( 'FeedbackDisplay', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n    afterEach( function() {\n        viewport.reset()\n    } );\n\n    describe( 'constructor', function() {\n\n        it( 'should throw an error when option fieldErrorClass is not of type String', function() {\n            expect( function() {\n                    var feedbackDisplay = new FeedbackDisplay( {\n                        fieldErrorClass: 1\n                    } );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when option fieldSuccessClass is not of type String', function() {\n            expect( function() {\n                    var feedbackDisplay = new FeedbackDisplay( {\n                        fieldSuccessClass: 1\n                    } );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when option messageTemplate is not of type String', function() {\n            expect( function() {\n                    var feedbackDisplay = new FeedbackDisplay( {\n                        messageTemplate: 1\n                    } );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when option messageCreateFunction is not of type Null or Function', function() {\n            expect( function() {\n                    var feedbackDisplay = new FeedbackDisplay( {\n                        messageCreateFunction: 1\n                    } );\n                }\n            ).toThrowError( TypeError );\n        } );\n\n        it( 'should not throw an error when given options are empty or undefined', function() {\n            expect( function() {\n                    var feedbackDisplay = new FeedbackDisplay( {} );\n                    var feedbackDisplay2 = new FeedbackDisplay();\n                }\n            ).not.toThrowError( TypeError );\n        } );\n\n    } );\n\n\n    describe( 'setStatusInvalidAria( field, fieldIdForAriaUsage )', function() {\n\n        it( 'should set aria attributes for invalid status', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var id = 'name';\n                var field = document.getElementById( id );\n\n                feedbackDisplay.setStatusInvalidAria( field, null );\n                var ariaInvalidAttr = field.getAttribute( 'aria-invalid' );\n                var ariaDescribedby = field.getAttribute( 'aria-describedby' );\n                var r = ariaInvalidAttr === 'true' && ariaDescribedby === 'validation-message-' + id ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n        it( 'should use correct dom element for message location', function() {\n            var html = fixture.load( '/test/fixtures/form.html' );\n            var feedbackDisplay = new FeedbackDisplay();\n            var id = 'name';\n            var field = document.getElementById( id );\n\n            sinon.spy( feedbackDisplay, 'getMessageId' );\n\n            feedbackDisplay.setStatusInvalidAria( field, null );\n            sinon.assert.calledWith( feedbackDisplay.getMessageId, field );\n\n            var fieldUseId = 'nameWithFeedbackDisplay';\n            var fieldUse = document.getElementById( 'nameWithFeedbackDisplay' );\n            feedbackDisplay.setStatusInvalidAria( field, fieldUseId );\n            sinon.assert.calledWith( feedbackDisplay.getMessageId, fieldUse );\n        } );\n\n    } );\n\n    describe( 'removeStatus( field )', function() {\n\n        it( 'should have cleaned html (no validation classes, nor validation aria attributes)', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var id = 'name';\n                var field = document.getElementById( id );\n\n                feedbackDisplay.setStatusInvalidAria( field, null );\n                var fieldErrorClass = feedbackDisplay.options.fieldErrorClass;\n                var fieldSuccessClass = feedbackDisplay.options.fieldSuccessClass;\n\n                feedbackDisplay.removeStatus( field );\n\n                var ariaInvalidAttr = field.getAttribute( 'aria-invalid' );\n                var ariaDescribedby = field.getAttribute( 'aria-describedby' );\n\n                var r = !field.classList.contains( fieldErrorClass ) && !field.classList.contains( fieldSuccessClass ) &&\n                ( ariaInvalidAttr === null || ariaInvalidAttr === '' ) &&\n                ( ariaDescribedby === null || ariaDescribedby === '' ) ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n    describe( 'setStatus( field, valid, fieldIdForAriaUsage )', function() {\n\n        it( 'should have correct html depending on validation result', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var id = 'name';\n                var field = document.getElementById( id );\n                var fieldErrorClass = feedbackDisplay.options.fieldErrorClass;\n                var fieldSuccessClass = feedbackDisplay.options.fieldSuccessClass;\n\n                feedbackDisplay.setStatus( field, false, null );\n\n                var ariaInvalidAttr = field.getAttribute( 'aria-invalid' );\n                var ariaDescribedby = field.getAttribute( 'aria-describedby' );\n\n                var r = field.classList.contains( fieldErrorClass ) &&\n                ariaInvalidAttr === 'true' &&\n                ariaDescribedby === 'validation-message-' + id ? true : false;\n\n                feedbackDisplay.setStatus( field, true, null );\n\n                ariaInvalidAttr = field.getAttribute( 'aria-invalid' );\n                ariaDescribedby = field.getAttribute( 'aria-describedby' );\n\n                var r2 = !field.classList.contains( fieldErrorClass ) &&\n                field.classList.contains( fieldSuccessClass ) &&\n                ( ariaInvalidAttr === null || ariaInvalidAttr === '' ) &&\n                ( ariaDescribedby === null || ariaDescribedby === '' ) ? true : false;\n\n                return r && r2;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n\n    describe( 'setStatusBySelector( selector, status )', function() {\n\n        it( 'should have correct html depending on validation result', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var selector = '#name, #nameWithFeedbackDisplay';\n                var ariaInvalidAttr = 'aria-invalid';\n\n                feedbackDisplay.setStatusBySelector( selector, false );\n\n                var fieldsLength = document.querySelectorAll( '#form input[' + ariaInvalidAttr + ']' ).length;\n                var r = fieldsLength === 2 ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n    describe( 'getDefaultInsertLoc( field )', function() {\n\n        it( 'should give back a reference to the according label of field', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var field = document.getElementById( 'name' );\n                var label = document.querySelector( '[for=\"name\"]' );\n                var r = feedbackDisplay.getDefaultInsertLoc( field ) === label ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n    describe( 'checkMessageLocationDataFormat( messageLocation )', function() {\n\n        it( 'should throw an error if message location is not of type valid type', function() {\n            expect( function() {\n                var messageLocation = 1;\n                FeedbackDisplay.checkMessageLocationDataFormat( messageLocation );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error if message location is not of valid subtype', function() {\n            expect( function() {\n                var messageLocation = [ { 'minWidth': '0', 'insertTargetSelector': '[for=\"nameWithFeedbackDisplay\"]' } ];\n                FeedbackDisplay.checkMessageLocationDataFormat( messageLocation );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error if corresponding messageLocation.insertTargetSelector is null', function() {\n            expect( function() {\n                var messageLocation = [ { 'minWidth': 0, 'insertTargetSelector': '[for=\"nameWithFeedbackDisplay_DOES_NOT_EXIST\"]' } ];\n                FeedbackDisplay.checkMessageLocationDataFormat( messageLocation );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw no error if message location is made of valid data', function() {\n            expect( function() {\n                var messageLocation = [ { 'minWidth': 0, 'insertTargetSelector': '[for=\"nameWithFeedbackDisplay\"]' } ];\n                FeedbackDisplay.checkMessageLocationDataFormat( messageLocation );\n            } ).not.toThrowError();\n        } );\n\n\n    } );\n\n    describe( 'getBreakpointMessageInfoLocationData( messageLocation )', function() {\n\n        it( 'should return message breakpoint data 750', function() {\n\n            var messageLocationMin750 =\n            {\n                minWidth: 750,\n                insertTargetSelector: '#nameHidden'\n            };\n\n            expect( function() {\n\n                var feedbackDisplay = new FeedbackDisplay();\n\n                var messageLocation = [\n                    {\n                        minWidth: 0,\n                        insertTargetSelector: '#name'\n                    }\n                ];\n\n                messageLocation.push( messageLocationMin750 );\n\n                viewport.set( 750 );\n                var breakPointData = feedbackDisplay.getBreakpointMessageInfoLocationData( messageLocation );\n\n                return breakPointData;\n            }() ).toEqual( messageLocationMin750 );\n        } );\n\n        it( 'should return message location data of null', function( done ) {\n            if ( navigator.appName !== 'Netscape' ) {\n                var messageLocationMin750 =\n                {\n                    minWidth: 750,\n                    insertTargetSelector: '#nameHidden'\n                };\n\n                var feedbackDisplay = new FeedbackDisplay();\n\n                var messageLocation = [];\n\n                messageLocation.push( messageLocationMin750 );\n\n                viewport.set( 749 );\n\n                expect( function() {\n\n                    var breakPointData = feedbackDisplay.getBreakpointMessageInfoLocationData( messageLocation );\n\n                    return breakPointData;\n                }() ).toBe( null );\n            } else {\n                console.log( '!!!!!!!!!!!!!!!!!!!!!! viewport is not working in Netscape ' +\n                    '- so this test is skipped(should return message location data of null)' );\n                // TODO: Is there a possibility to get it working on FF/PhantomJS\n                done();\n            }\n\n        } );\n\n    } );\n\n\n    describe( 'getMessageInsertLocationData( field, messageLocation )', function() {\n\n\n        it( 'should return message location data with breakpoint data 750 and label of input as fallback insert point', function( ) {\n\n            var messageLocationMin750 =\n            {\n                minWidth: 750,\n                insertTargetSelector: '#nameHiddenDOES_NOT_EXIST'\n            };\n\n            var infoData = {\n                insertLoc: document.querySelector( '[for=\"name\"]' ),\n                breakpointData: messageLocationMin750\n            }\n\n            expect( function() {\n\n                var feedbackDisplay = new FeedbackDisplay();\n                var id = 'name';\n                var field = document.getElementById( id );\n\n                var messageLocation = [];\n\n                messageLocation.push( messageLocationMin750 );\n\n                viewport.set( 750 );\n                var breakPointData = feedbackDisplay.getMessageInsertLocationData( field, messageLocation );\n\n                return breakPointData;\n\n\n            }() ).toEqual( infoData );\n\n        } );\n\n    } );\n\n    describe( 'showMessage( field, message, messageLocation )', function() {\n\n        it( 'should show error message with specific message and fallback insert point', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var field = document.getElementById( 'name' );\n                var message = 'Enter a name, please.';\n                var messageLocation = null;\n                var messageId = feedbackDisplay.getMessageId( field );\n                feedbackDisplay.showMessage( field, message, messageLocation );\n\n                var messageDom = document.getElementById( messageId );\n                var r =  messageDom instanceof HTMLElement &&\n                messageDom.innerHTML === message ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n\n    describe( 'removeMessageAndAccordingAriaAttrOfField( field )', function() {\n\n        it( 'should remove error message and accrding aria attributes of field', function() {\n            expect( function() {\n                var feedbackDisplay = new FeedbackDisplay();\n                var field = document.getElementById( 'name' );\n                var message = 'Enter a name, please.';\n                var messageLocation = null;\n                var messageId = feedbackDisplay.getMessageId( field );\n                feedbackDisplay.showMessage( field, message, messageLocation );\n\n                feedbackDisplay.removeMessageAndAccordingAriaAttrOfField( field );\n\n                var messageDom = document.getElementById( messageId );\n                var r =  messageDom === null &&\n                    field.getAttribute( 'aria-describedby' ) === null ? true : false;\n                return r;\n            }() ).toBeTruthy();\n        } );\n\n    } );\n\n    // describe( 'getMessageId( field )', function() {\n    //\n    //     it( 'should give back validation message id', function() {\n    //         expect( function() {\n    //             var feedbackDisplay = new FeedbackDisplay();\n    //             var id = 'name';\n    //             var field = document.getElementById( id );\n    //             var messge = feedbackDisplay.getMessageId( field );s\n    //             var r = message instanceof HTMLElement ? true : false;\n    //             return r;\n    //         }() ).toBeTruthy();\n    //     } );\n    //\n    // } );\n\n\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/feedbackDisplay.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "access": null,
    "description": "FeedbackDisplay",
    "lineNumber": 4,
    "testTargets": [
      "FeedbackDisplay"
    ]
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "access": null,
    "description": "constructor",
    "lineNumber": 14
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32.it33",
    "access": null,
    "description": "should throw an error when option fieldErrorClass is not of type String",
    "lineNumber": 16
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32.it34",
    "access": null,
    "description": "should throw an error when option fieldSuccessClass is not of type String",
    "lineNumber": 25
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32.it35",
    "access": null,
    "description": "should throw an error when option messageTemplate is not of type String",
    "lineNumber": 34
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32.it36",
    "access": null,
    "description": "should throw an error when option messageCreateFunction is not of type Null or Function",
    "lineNumber": 43
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe32.it37",
    "access": null,
    "description": "should not throw an error when given options are empty or undefined",
    "lineNumber": 52
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe38",
    "access": null,
    "description": "setStatusInvalidAria( field, fieldIdForAriaUsage )",
    "lineNumber": 63
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe38.it39",
    "access": null,
    "description": "should set aria attributes for invalid status",
    "lineNumber": 65
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe38.it40",
    "access": null,
    "description": "should use correct dom element for message location",
    "lineNumber": 79
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe41",
    "access": null,
    "description": "removeStatus( field )",
    "lineNumber": 98
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe41.it42",
    "access": null,
    "description": "should have cleaned html (no validation classes, nor validation aria attributes)",
    "lineNumber": 100
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe43",
    "access": null,
    "description": "setStatus( field, valid, fieldIdForAriaUsage )",
    "lineNumber": 124
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe43.it44",
    "access": null,
    "description": "should have correct html depending on validation result",
    "lineNumber": 126
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe45",
    "access": null,
    "description": "setStatusBySelector( selector, status )",
    "lineNumber": 160
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe45.it46",
    "access": null,
    "description": "should have correct html depending on validation result",
    "lineNumber": 162
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe47",
    "access": null,
    "description": "getDefaultInsertLoc( field )",
    "lineNumber": 178
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe47.it48",
    "access": null,
    "description": "should give back a reference to the according label of field",
    "lineNumber": 180
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49",
    "access": null,
    "description": "checkMessageLocationDataFormat( messageLocation )",
    "lineNumber": 192
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49.it50",
    "access": null,
    "description": "should throw an error if message location is not of type valid type",
    "lineNumber": 194
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49.it51",
    "access": null,
    "description": "should throw an error if message location is not of valid subtype",
    "lineNumber": 201
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49.it52",
    "access": null,
    "description": "should throw an error if corresponding messageLocation.insertTargetSelector is null",
    "lineNumber": 208
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe49.it53",
    "access": null,
    "description": "should throw no error if message location is made of valid data",
    "lineNumber": 215
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe54",
    "access": null,
    "description": "getBreakpointMessageInfoLocationData( messageLocation )",
    "lineNumber": 225
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe54.it55",
    "access": null,
    "description": "should return message breakpoint data 750",
    "lineNumber": 227
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe54.it56",
    "access": null,
    "description": "should return message location data of null",
    "lineNumber": 255
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe57",
    "access": null,
    "description": "getMessageInsertLocationData( field, messageLocation )",
    "lineNumber": 289
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe57.it58",
    "access": null,
    "description": "should return message location data with breakpoint data 750 and label of input as fallback insert point",
    "lineNumber": 292
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe59",
    "access": null,
    "description": "showMessage( field, message, messageLocation )",
    "lineNumber": 327
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe59.it60",
    "access": null,
    "description": "should show error message with specific message and fallback insert point",
    "lineNumber": 329
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe61",
    "access": null,
    "description": "removeMessageAndAccordingAriaAttrOfField( field )",
    "lineNumber": 348
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/feedbackDisplay.spec.js~describe31.describe61.it62",
    "access": null,
    "description": "should remove error message and accrding aria attributes of field",
    "lineNumber": 350
  },
  {
    "__docId__": 239,
    "kind": "testFile",
    "name": "test/validation/formValidation/formValidation.spec.js",
    "content": "import {FormValidation} from '../../../src/validation/formValidation/formValidation';\n/** @test {FormValidation} */\n\ndescribe( 'FormValidation', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n\n    describe( 'constructor( options )', function() {\n\n\n        var optionsMinimalValid = {\n            formId: 'form'\n        };\n\n        /**\n         * Check constructor\n         *\n         *\n         *\n         */\n        it( 'should throw an error when given parameter is not of type object', function() {\n            expect( function() {\n                new FormValidation( 1 );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error when parameter formId is not of type string', function() {\n            expect( function() {\n                new FormValidation( { formId: null } );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should not throw an error with valid minimal options', function() {\n            expect( function() {\n                new FormValidation( optionsMinimalValid );\n            } ).not.toThrowError( TypeError );\n        } );\n\n        /**\n         *\n         * html which is used: test/fixtures/form.html\n         * Check getValidationConfig( fields ) which is called in constructor\n         */\n\n        it( 'should throw an error on invalid data-validation data in html', function() {\n            expect( function() {\n                var formValidation = new FormValidation( {\n                    formId: 'formInvalidDataAttrData'\n                } );\n            } ).toThrowError( Error );\n        } );\n\n        it( 'should throw an error on fields which have no validator declared on data-validation attr in html', function() {\n            expect( function() {\n                var formValidation = new FormValidation( {\n                    formId: 'formDataAttrDataWithoutValidators'\n                } );\n            } ).toThrowError( Error );\n        } );\n\n        it( 'should create html driven validation data object with 1 field', function() {\n            var formValidation = new FormValidation( { formId: 'form' } );\n            expect( Object.keys( formValidation.config ).length ).toBe( 2 );\n        } );\n\n        /**\n         *\n         * html which is used: test/fixtures/form.html\n         * Check getValidationFieldConfig( fields ) which is called in constructor\n         */\n        it( 'should throw an error on fields which have no valid mesaageLocation data', function() {\n            expect( function() {\n                var formValidation = new FormValidation( {\n                    formId: 'formInvalidMessageLocationData'\n                } );\n            } ).toThrowError( TypeError );\n        } );\n    } );\n\n    describe( 'init()', function() {\n        it( 'should throw an error when parameter Behaviour is not a class/prototype', function() {\n            expect( function() {\n                formValidation = new FormValidation( {\n                    formId: 'form',\n                    Behaviour: {}\n                } );\n                formValidation.init();\n            } ).toThrowError( Error );\n        } );\n\n        it( 'should not throw an error when parameter Behaviour is a class/prototype', function() {\n            var Behaviour = function( formId ) {\n            };\n            Behaviour.prototype.behaviour = function() {\n            };\n            expect( function() {\n                formValidation = new FormValidation( {\n                    formId: 'form',\n                    Behaviour: Behaviour\n                } );\n                formValidation.init();\n            } ).not.toThrowError( TypeError );\n        } );\n\n    } );\n\n\n    describe( 'validateForm()', function() {\n        it( 'should validate(fail) form and set accessible html output (error mesage with proper aria attributes)',\n            function( done ) {\n\n            var formValidation = new FormValidation( {\n                formId: 'form'\n            } );\n            formValidation.init();\n\n            formValidation.validateForm().then( function( result ) {\n            } ).catch( function( result ) {\n\n                var n = document.getElementById( 'form' );\n\n                axe.run(n, function (err, result) {\n                    expect(err).toBe(null);\n                    expect(result.violations.length).toBe(0);\n                    done();\n                });\n\n            } );\n\n        } );\n    } );\n\n    describe( 'validateForm()', function() {\n        it( 'should validate(ok) form and set accessible html output (error mesage with proper aria attributes)',\n            function( done ) {\n\n                var formValidation = new FormValidation( {\n                    formId: 'form'\n                } );\n                formValidation.init();\n\n                formValidation.validateForm().then( function( result ) {\n                } ).catch( function( result ) {\n\n                    var n = document.getElementById( 'form' );\n\n                    axe.run(n, function (err, result) {\n                        expect(err).toBe(null);\n                        expect(result.violations.length).toBe(0);\n                        done();\n                    });\n\n                } );\n\n            } );\n    } );\n\n\n\n    /**\n     * Check further elements\n     *\n     *\n     *\n     *\n     */\n\n\n    // it( 'should set the config via html markup', function() {\n    //     expect( new FormValidation( optionsMinimalValid ).config ).toEqual( {\n    //         name: {\n    //             \"required\": { \"message\": \"Required \\\"name\\\" not set\" }\n    //         }\n    //     } );\n    // } );\n\n\n} );",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/formValidation.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/validation/formValidation/formValidation.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63",
    "access": null,
    "description": "FormValidation",
    "lineNumber": 4,
    "testTargets": [
      "FormValidation"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "access": null,
    "description": "constructor( options )",
    "lineNumber": 11
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it65",
    "access": null,
    "description": "Check constructor",
    "lineNumber": 24
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it66",
    "access": null,
    "description": "should throw an error when parameter formId is not of type string",
    "lineNumber": 30
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it67",
    "access": null,
    "description": "should not throw an error with valid minimal options",
    "lineNumber": 36
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it68",
    "access": null,
    "description": "\nhtml which is used: test/fixtures/form.html\nCheck getValidationConfig( fields ) which is called in constructor",
    "lineNumber": 48
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it69",
    "access": null,
    "description": "should throw an error on fields which have no validator declared on data-validation attr in html",
    "lineNumber": 56
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it70",
    "access": null,
    "description": "should create html driven validation data object with 1 field",
    "lineNumber": 64
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe64.it71",
    "access": null,
    "description": "\nhtml which is used: test/fixtures/form.html\nCheck getValidationFieldConfig( fields ) which is called in constructor",
    "lineNumber": 74
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe72",
    "access": null,
    "description": "init()",
    "lineNumber": 83
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe72",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe72.it73",
    "access": null,
    "description": "should throw an error when parameter Behaviour is not a class/prototype",
    "lineNumber": 84
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe72",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe72.it74",
    "access": null,
    "description": "should not throw an error when parameter Behaviour is a class/prototype",
    "lineNumber": 94
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe75",
    "access": null,
    "description": "validateForm()",
    "lineNumber": 111
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe75.it76",
    "access": null,
    "description": "should validate(fail) form and set accessible html output (error mesage with proper aria attributes)",
    "lineNumber": 112
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe77",
    "access": null,
    "description": "validateForm()",
    "lineNumber": 136
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/validation/formValidation/formValidation.spec.js~describe63.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/formValidation.spec.js~describe63.describe77.it78",
    "access": null,
    "description": "should validate(ok) form and set accessible html output (error mesage with proper aria attributes)",
    "lineNumber": 137
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "test/validation/formValidation/getValidationFields.spec.js",
    "content": "import getValidationFields from '../../../src/validation/formValidation/getValidationFields';\nimport condition from '../../../src/validation/formValidation/condition';\n/** @test {getValidationFields} */\n\ndescribe( 'getValidationFields', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n    var validationAttr = 'data-validation';\n\n    /**\n     * getValidationFields( formId, validationAttr, condition)\n     */\n    it( 'should throw an error when formId is not of type String', function() {\n        expect( function() {\n                getValidationFields( 1, validationAttr, condition );\n            }\n        ).toThrowError( TypeError );\n    } );\n\n    it( 'should throw an error when validationAttr is not of type String', function() {\n        expect( function() {\n                getValidationFields( 'form', 1, condition );\n            }\n        ).toThrowError( TypeError );\n    } );\n\n    it( 'should throw an error when condition is not of type Function', function() {\n        expect( function() {\n                getValidationFields( 'form', validationAttr, 1 );\n            }\n        ).toThrowError( TypeError );\n    } );\n\n    it( 'should throw an error when form is not given', function() {\n        var form = document.getElementById( 'formWrongId' );\n        expect( function() {\n                getValidationFields( 'formWrongId', validationAttr, condition );\n            }\n        ).toThrowError( TypeError );\n    } );\n\n    it( 'should give back an array > 0', function() {\n        expect(\n            getValidationFields( 'form', validationAttr, condition ).length\n        ).toBeGreaterThan( 0 );\n    } );\n\n    it( 'should give back an array === 0', function() {\n        expect(\n            getValidationFields( 'formNoValidatorAttributes', validationAttr, condition ).length\n        ).toBe( 0 );\n    } );\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/getValidationFields.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "access": null,
    "description": "getValidationFields",
    "lineNumber": 5,
    "testTargets": [
      "getValidationFields"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it80",
    "access": null,
    "description": "getValidationFields( formId, validationAttr, condition)",
    "lineNumber": 16
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it81",
    "access": null,
    "description": "should throw an error when validationAttr is not of type String",
    "lineNumber": 23
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it82",
    "access": null,
    "description": "should throw an error when condition is not of type Function",
    "lineNumber": 30
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it83",
    "access": null,
    "description": "should throw an error when form is not given",
    "lineNumber": 37
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it84",
    "access": null,
    "description": "should give back an array > 0",
    "lineNumber": 45
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/validation/formValidation/getValidationFields.spec.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/getValidationFields.spec.js~describe79.it85",
    "access": null,
    "description": "should give back an array === 0",
    "lineNumber": 51
  },
  {
    "__docId__": 264,
    "kind": "testFile",
    "name": "test/validation/formValidation/resolver.spec.js",
    "content": "import {FeedbackDisplay} from '../../../src/validation/formValidation/feedbackDisplay';\nimport {Resolver} from '../../../src/validation/formValidation/resolver';\nimport {FormValidation} from '../../../src/validation/formValidation/formValidation';\n\n/** @test {Resolver} */\n\ndescribe( 'Resolver', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n\n    var formId = 'form';\n\n    describe( 'constructor( configFields, validators, feedbackDisplay )', function() {\n\n        it( 'should throw an error on wrong configFields type', function() {\n            expect( function() {\n                var formValidation = new FormValidation( { formId: formId } );\n                new Resolver(\n                    1,\n                    formValidation.options.validators,\n                    formValidation.feedbackDisplay );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error on wrong validators type', function() {\n            expect( function() {\n                var formValidation = new FormValidation( { formId: formId } );\n                new Resolver(\n                    formValidation.configFields,\n                    1,\n                    formValidation.feedbackDisplay );\n            } ).toThrowError( TypeError );\n        } );\n\n        it( 'should throw an error on wrong feedbackDisplay type', function() {\n            expect( function() {\n                var formValidation = new FormValidation( { formId: formId } );\n                new Resolver(\n                    formValidation.configFields,\n                    formValidation.options.validators,\n                    1 );\n            } ).toThrowError( TypeError );\n        } );\n\n    } );\n\n\n    describe( 'getValidationFeedbackData( result, fieldName )', function() {\n\n        var validatorResultData = {\n            options: {\n                feedbackDisplay: {\n                    fieldShowState: false\n                }\n            }\n        };\n\n        it( 'should throw an error on wrong result type', function() {\n\n            var formValidation = new FormValidation( { formId: formId } );\n            var getValidationFeedbackDataExpected = FeedbackDisplay.getDefaultFieldOptions();\n            getValidationFeedbackDataExpected.messageLocation = [ {\n                \"minWidth\": 0,\n                \"insertTargetSelector\": \"[for=\\\"nameWithFeedbackDisplay\\\"]\"\n            } ];\n            getValidationFeedbackDataExpected.fieldShowState = false;\n\n            expect( function() {\n                var resolver = new Resolver(\n                    formValidation.configFields,\n                    formValidation.options.validators,\n                    formValidation.feedbackDisplay );\n                resolver.getValidationFeedbackData( 1, 'nameWithFeedbackDisplay' );\n            } ).toThrowError( TypeError );\n\n        } );\n\n        it( 'should throw an error on wrong fieldName type', function() {\n\n            var formValidation = new FormValidation( { formId: formId } );\n            var getValidationFeedbackDataExpected = FeedbackDisplay.getDefaultFieldOptions();\n            getValidationFeedbackDataExpected.messageLocation = [ {\n                \"minWidth\": 0,\n                \"insertTargetSelector\": \"[for=\\\"nameWithFeedbackDisplay\\\"]\"\n            } ];\n            getValidationFeedbackDataExpected.fieldShowState = false;\n\n            expect( function() {\n                var resolver = new Resolver(\n                    formValidation.configFields,\n                    formValidation.options.validators,\n                    formValidation.feedbackDisplay );\n                resolver.getValidationFeedbackData( validatorResultData, 1 );\n            } ).toThrowError( TypeError );\n\n        } );\n\n\n        it( 'should give back a proper merged feedback data object', function() {\n\n            var formValidation = new FormValidation( { formId: formId } );\n\n            var getValidationFeedbackDataExpected = FeedbackDisplay.getDefaultFieldOptions();\n            getValidationFeedbackDataExpected.messageLocation = [ {\n                \"minWidth\": 0,\n                \"insertTargetSelector\": \"[for=\\\"nameWithFeedbackDisplay\\\"]\"\n            } ];\n            getValidationFeedbackDataExpected.fieldShowState = false;\n\n            expect( function() {\n                var resolver = new Resolver(\n                    formValidation.configFields,\n                    formValidation.options.validators,\n                    formValidation.feedbackDisplay );\n                return resolver.getValidationFeedbackData( validatorResultData, 'nameWithFeedbackDisplay' );\n            }() ).toEqual( getValidationFeedbackDataExpected );\n\n        } );\n\n\n    } );\n\n    describe( 'displayActionSetByValidatorOnly( setByValidatorOnly )', function() {\n\n        it( 'should set/remove status classes and aria attributes by setByValidatorOnly param', function( done ) {\n\n            var setByValidatorOnly = {\n                fieldShowStateValidSel: null,\n                fieldShowStateInvalidSel: null,\n                fieldRemoveStateSel: '#name'\n            }\n\n            var formValidation = new FormValidation( { formId: formId } );\n            formValidation.init();\n\n            var field = document.getElementById( 'name' );\n            var eventName = 'name' + '-validated';\n            field.addEventListener( eventName, function( event ) {\n                formValidation.resolver.displayActionSetByValidatorOnly( setByValidatorOnly );\n                expect( function() {\n                    return !document.getElementById( 'name' ).classList.contains( 'validation-error' );\n                }() ).toBeTruthy();\n\n                done();\n\n            } );\n\n            formValidation.validateForm();\n\n        } );\n\n\n    } );\n\n\n    describe( 'displayActionInvalid( result, fieldDom, validator, configFeedbackDisplay )', function() {\n\n        it( 'should set error caused dom manipulations', function( done ) {\n\n            var validatorResultData = {\n                options: {\n                    feedbackDisplay: {\n                        fieldShowState: false\n                    }\n                }\n            };\n\n            var configServiceValidator = {\n                \"message\": \"Required \\\"name\\\" not set\"\n            }\n\n            var formValidation = new FormValidation( { formId: formId } );\n            formValidation.init();\n\n            var name = 'name';\n            var field = document.getElementById( name );\n            var eventName = name + '-validated';\n            field.addEventListener( eventName, function( event ) {\n                formValidation.resolver.displayActionInvalid(\n                    validatorResultData,\n                    field,\n                    configServiceValidator,\n                    formValidation.configFields[ name ].feedbackDisplay );\n                expect( function() {\n                    return document.getElementById( name ).classList.contains( 'validation-error' );\n                }() ).toBeTruthy();\n\n                done();\n\n            } );\n\n            formValidation.validateForm();\n\n        } );\n\n\n    } );\n\n\n    describe( 'displayActionValid( fieldDom, configFeedbackDisplay )', function() {\n\n        it( 'should set valid validator result caused dom manipulations', function( done ) {\n\n            var validatorResultData = {\n                options: {\n                    feedbackDisplay: {\n                        fieldShowState: true\n                    }\n                }\n            };\n\n            var configServiceValidator = {\n                \"message\": \"Required \\\"name\\\" not set\"\n            }\n\n            var formValidation = new FormValidation( { formId: formId } );\n            formValidation.init();\n\n            var name = 'name';\n            var field = document.getElementById( name );\n            var eventName = name + '-validated';\n            field.addEventListener( eventName, function( event ) {\n                formValidation.resolver.displayActionValid(\n                    field,\n                    formValidation.configFields[ name ].feedbackDisplay );\n                expect( function() {\n                    return document.getElementById( name ).classList.contains( 'validation-success' );\n                }() ).toBeTruthy();\n\n                done();\n\n            } );\n\n            formValidation.validateForm();\n\n        } );\n\n\n    } );\n\n\n    describe( 'getAddDataOfGroupMembers( fieldName, configFields )', function() {\n\n        it( 'should give additional data to validator', function( done ) {\n\n            var addInfo = [\n                    { id: 'name', value: '' },\n                    { id: 'nameHidden', value: 'testnameHidden' }\n                ];\n\n            var validatorResultData = {\n                options: {\n                    feedbackDisplay: {\n                        fieldShowState: true\n                    }\n                }\n            };\n\n            var configServiceValidator = {\n                \"message\": \"Required \\\"name\\\" not set\"\n            }\n\n            var formValidation = new FormValidation( { formId: formId } );\n            formValidation.init();\n\n            var name = 'name';\n            var field = document.getElementById( name );\n            var eventName = name + '-validated';\n            field.addEventListener( eventName, function( event ) {\n\n                expect( function() {\n                    return formValidation.resolver.getAddDataOfGroupMembers( 'nameWithFeedbackDisplay', formValidation.configFields );\n                }() ).toEqual( addInfo );\n\n                done();\n\n            } );\n\n            formValidation.validateForm();\n\n        } );\n\n\n    } );\n\n\n\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/resolver.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/validation/formValidation/resolver.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86",
    "access": null,
    "description": "Resolver",
    "lineNumber": 7,
    "testTargets": [
      "Resolver"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe87",
    "access": null,
    "description": "constructor( configFields, validators, feedbackDisplay )",
    "lineNumber": 16
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe87.it88",
    "access": null,
    "description": "should throw an error on wrong configFields type",
    "lineNumber": 18
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe87.it89",
    "access": null,
    "description": "should throw an error on wrong validators type",
    "lineNumber": 28
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe87.it90",
    "access": null,
    "description": "should throw an error on wrong feedbackDisplay type",
    "lineNumber": 38
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe91",
    "access": null,
    "description": "getValidationFeedbackData( result, fieldName )",
    "lineNumber": 51
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe91.it92",
    "access": null,
    "description": "should throw an error on wrong result type",
    "lineNumber": 61
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe91.it93",
    "access": null,
    "description": "should throw an error on wrong fieldName type",
    "lineNumber": 81
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe91.it94",
    "access": null,
    "description": "should give back a proper merged feedback data object",
    "lineNumber": 102
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe95",
    "access": null,
    "description": "displayActionSetByValidatorOnly( setByValidatorOnly )",
    "lineNumber": 126
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe95.it96",
    "access": null,
    "description": "should set/remove status classes and aria attributes by setByValidatorOnly param",
    "lineNumber": 128
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe97",
    "access": null,
    "description": "displayActionInvalid( result, fieldDom, validator, configFeedbackDisplay )",
    "lineNumber": 159
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe97.it98",
    "access": null,
    "description": "should set error caused dom manipulations",
    "lineNumber": 161
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe99",
    "access": null,
    "description": "displayActionValid( fieldDom, configFeedbackDisplay )",
    "lineNumber": 203
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe99.it100",
    "access": null,
    "description": "should set valid validator result caused dom manipulations",
    "lineNumber": 205
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe101",
    "access": null,
    "description": "getAddDataOfGroupMembers( fieldName, configFields )",
    "lineNumber": 245
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/validation/formValidation/resolver.spec.js~describe86.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/resolver.spec.js~describe86.describe101.it102",
    "access": null,
    "description": "should give additional data to validator",
    "lineNumber": 247
  },
  {
    "__docId__": 282,
    "kind": "testFile",
    "name": "test/validation/formValidation/validators/email.spec.js",
    "content": "import required from '../../../../src/validation/formValidation/validators/email';\n\n/** @test {Cache} */\n\ndescribe( 'Validator', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n\n    describe( 'required( value )', function() {\n\n        it( 'should turn back value \"frank.uekermann@denkwerk.com\" as { isValid: true }', function( done ) {\n\n            var expectedObj = { isValid: true };\n\n            var value = 'frank.uekermann@denkwerk.com';\n\n            var validator = required( value );\n\n            validator.then( function( result ) {\n                expect( result.isValid ).toBe( expectedObj.isValid );\n                done();\n            } );\n\n\n        } );\n\n        it( 'should turn back value \"frank.uekermann@denkwerk\" as { isValid: false }', function( done ) {\n\n            var expectedObj = { isValid: false };\n\n            var value = 'frank.uekermann@denkwerk';\n\n            var validator = required( value );\n\n            validator.then( function( result ) {\n            } ).catch( function( result ) {\n                expect( result.isValid ).toBe( expectedObj.isValid );\n                done();\n            } );\n\n        } );\n\n    } );\n\n\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/validators/email.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/validation/formValidation/validators/email.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/validators/email.spec.js~describe103",
    "access": null,
    "description": "Validator",
    "lineNumber": 5,
    "testTargets": [
      "Cache"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "test/validation/formValidation/validators/email.spec.js~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/validators/email.spec.js~describe103.describe104",
    "access": null,
    "description": "required( value )",
    "lineNumber": 12
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/validation/formValidation/validators/email.spec.js~describe103.describe104",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/validators/email.spec.js~describe103.describe104.it105",
    "access": null,
    "description": "should turn back value \"frank.uekermann@denkwerk.com\" as { isValid: true }",
    "lineNumber": 14
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/validation/formValidation/validators/email.spec.js~describe103.describe104",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/validators/email.spec.js~describe103.describe104.it106",
    "access": null,
    "description": "should turn back value \"frank.uekermann@denkwerk\" as { isValid: false }",
    "lineNumber": 30
  },
  {
    "__docId__": 287,
    "kind": "testFile",
    "name": "test/validation/formValidation/validators/required.spec.js",
    "content": "import required from '../../../../src/validation/formValidation/validators/required';\n\n/** @test {Cache} */\n\ndescribe( 'Validator', function() {\n\n    beforeEach( function() {\n        this.result = fixture.load( '/test/fixtures/form.html' );\n    } );\n\n\n    describe( 'required( value )', function() {\n\n        it( 'should turn back value \"something\" as { isValid: true }', function( done ) {\n\n            var expectedObj = { isValid: true };\n\n            var fieldId = 'name';\n            var value = 'something';\n\n            var validator = required( value );\n\n            validator.then( function( result ) {\n                expect( result.isValid ).toBe( expectedObj.isValid );\n                done();\n            } );\n\n\n        } );\n\n        it( 'should turn back value \"\" as { isValid: false }', function( done ) {\n\n            var expectedObj = { isValid: false };\n\n            var fieldId = 'name';\n            var field = document.getElementById( fieldId );\n            var value = field.value;\n\n            var validator = required( value );\n\n            validator.then( function( result ) {\n            } ).catch( function( result ) {\n                expect( result.isValid ).toBe( expectedObj.isValid );\n                done();\n            } );\n\n        } );\n\n    } );\n\n\n\n} );\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/formValidation/validators/required.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/validation/formValidation/validators/required.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/formValidation/validators/required.spec.js~describe107",
    "access": null,
    "description": "Validator",
    "lineNumber": 5,
    "testTargets": [
      "Cache"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe108",
    "testId": 108,
    "memberof": "test/validation/formValidation/validators/required.spec.js~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/formValidation/validators/required.spec.js~describe107.describe108",
    "access": null,
    "description": "required( value )",
    "lineNumber": 12
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/validation/formValidation/validators/required.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/validators/required.spec.js~describe107.describe108.it109",
    "access": null,
    "description": "should turn back value \"something\" as { isValid: true }",
    "lineNumber": 14
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/validation/formValidation/validators/required.spec.js~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "test/validation/formValidation/validators/required.spec.js~describe107.describe108.it110",
    "access": null,
    "description": "should turn back value \"\" as { isValid: false }",
    "lineNumber": 31
  },
  {
    "__docId__": 292,
    "kind": "testFile",
    "name": "test/validation/validation.service.dom.spec.js",
    "content": "import { ValidationServiceDom } from '../../src/validation/validation.service.dom';\r\n/** @test {ValidationServiceDom} */\r\n\r\ndescribe( 'Validation Service Dom', function() {\r\n\r\n    // https://www.npmjs.com/package/karma-fixture\r\n    // not working\r\n    // before(function(){\r\n    //     fixture.setBase( 'test/fixtures' );\r\n    // });\r\n\r\n    beforeEach(function(){\r\n        this.result = fixture.load( '/test/fixtures/form.html' );\r\n    });\r\n\r\n    var cacheMock = {\r\n        getValue: function() {\r\n            return false;\r\n        },\r\n        setValue: function() {}\r\n    };\r\n\r\n    it( 'should throw an error when given parameter is not instance of ' +\r\n        'HTMLInputElemen, HTMLSelectElement or  HTMLTextAreaElement', function() {\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationServiceDom( {}, validationResolver, cacheMock );\r\n        expect(function() {\r\n            validationService.setValueByField( 'string' )\r\n        }).toThrowError( TypeError );\r\n    } );\r\n\r\n    it( 'should set the correct value to validator config', function() {\r\n        var el = document.getElementById( 'name' );\r\n        el.value = 'testname';\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationServiceDom( {}, validationResolver, cacheMock );\r\n        var config = validationService.getValues();\r\n        validationService.setValueByField( el );\r\n        expect( config ).toEqual( {\r\n            name: 'testname'\r\n        } );\r\n    } );\r\n\r\n    it( 'should set the correct value to validator config by using a checkbox field', function() {\r\n        var el = document.getElementById( 'checkbox' );\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationServiceDom( {}, validationResolver, cacheMock );\r\n        var config = validationService.getValues();\r\n        validationService.setValueByField( el );\r\n        expect( config ).toEqual( {\r\n            checkbox: true\r\n        } );\r\n    } );\r\n    \r\n    \r\n} );\r\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/validation.service.dom.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "test/validation/validation.service.dom.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/validation.service.dom.spec.js~describe111",
    "access": null,
    "description": "Validation Service Dom",
    "lineNumber": 4,
    "testTargets": [
      "ValidationServiceDom"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/validation/validation.service.dom.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.dom.spec.js~describe111.it112",
    "access": null,
    "lineNumber": 23
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/validation/validation.service.dom.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.dom.spec.js~describe111.it113",
    "access": null,
    "description": "should set the correct value to validator config",
    "lineNumber": 32
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/validation/validation.service.dom.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.dom.spec.js~describe111.it114",
    "access": null,
    "description": "should set the correct value to validator config by using a checkbox field",
    "lineNumber": 44
  },
  {
    "__docId__": 297,
    "kind": "testFile",
    "name": "test/validation/validation.service.spec.js",
    "content": "import { ValidationService } from '../../src/validation/validation.service';\r\n/** @test {ValidationService} */\r\n\r\ndescribe( 'Validation Service', function() {\r\n\r\n    var cacheMock = {\r\n        getValue: function() {\r\n            return false;\r\n        },\r\n        isCached: function() {\r\n            return false;\r\n        },\r\n        setValue: function() {}\r\n    };\r\n\r\n    var invalidConfigValues = [\r\n        { value: 'string', name: 'String' },\r\n        { value: undefined, name: 'undefined' },\r\n        { value: [], name: 'Array' },\r\n        { value: 5, name: 'Number' }\r\n    ];\r\n\r\n    invalidConfigValues.forEach( function( config ) {\r\n        it( 'should throw a type error when config is given ' + config.name, function() {\r\n            var validationResolver = { getValidator: function() {} };\r\n            var stopValidationOnFirstFail = false;\r\n            expect( function() {\r\n                new ValidationService( config.value, validationResolver, cacheMock, stopValidationOnFirstFail );\r\n            } ).toThrowError( TypeError );\r\n        } );\r\n    } );\r\n\r\n    it(\r\n        'should throw an error when the validation resolver does not implement the getValidator method',\r\n        function() {\r\n            var validationResolver = { getValidator: 'foobar' };\r\n            expect( function() {\r\n                new ValidationService( {}, validationResolver, cacheMock );\r\n            } ).toThrowError( TypeError );\r\n        } );\r\n\r\n    it( 'should throw an error when the cache does not implement the getValue method', function() {\r\n        var cacheMock = {\r\n            setValue: function() {}\r\n        };\r\n        var validationResolver = { getValidator: 'foobar' };\r\n\r\n        expect( function() {\r\n            new ValidationService( {}, validationResolver, cacheMock );\r\n        } ).toThrowError( TypeError );\r\n    } );\r\n\r\n    it( 'should throw an error when the cache does not implement the setValue method', function() {\r\n        var cacheMock = {\r\n            getValue: function() {}\r\n        };\r\n        var validationResolver = { getValidator: 'foobar' };\r\n\r\n        expect(function() {\r\n            new ValidationService( {}, validationResolver, cacheMock )\r\n        }).toThrowError( TypeError );\r\n    } );\r\n\r\n    it( 'should save the config on construction', function() {\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationService( {\r\n            foo: {}\r\n        }, validationResolver, cacheMock );\r\n\r\n        expect( validationService.config ).toEqual( {\r\n            foo: {}\r\n        } );\r\n    } );\r\n\r\n    it( 'should have a function setValues() setting all values', function() {\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationService( {}, validationResolver, cacheMock );\r\n\r\n        validationService.setValues( {\r\n            test: 'laberfoo'\r\n        } );\r\n\r\n        expect( validationService.getValues() ).toEqual( {\r\n            test: 'laberfoo'\r\n        } );\r\n    } );\r\n\r\n    it( 'should have a function setValue() setting a specific value', function() {\r\n        var validationResolver = { getValidator: function() {} };\r\n        var validationService = new ValidationService( {}, validationResolver, cacheMock );\r\n\r\n        validationService.setValue( 'test', 'laberfoo' );\r\n\r\n        expect( validationService.getValue( 'test' ) ).toEqual( 'laberfoo' );\r\n    } );\r\n\r\n    it( 'should validate one field with success', function( done ) {\r\n        var spy = sinon.spy( cacheMock, 'setValue' );\r\n\r\n        var validationResolver = { getValidator: function() {\r\n            return new Promise( function( resolve ) {\r\n                resolve( function( value, config, service ) {\r\n                    expect( value ).toBe( 'test' );\r\n                    expect( config ).toEqual( { message: 'Required field not set' } );\r\n                    expect( service ).toBe( validationService );\r\n                    return new Promise( function( resolve ) {\r\n                        resolve( { isValid: true } );\r\n                    } );\r\n                } );\r\n            } );\r\n        } };\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' }\r\n            }\r\n        }, validationResolver, cacheMock );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.validate( 'fieldA', 'test' ).then( function( result ) {\r\n            spy.firstCall.calledWith( 'test.fieldA', {\r\n                value: 'test',\r\n                validators: {\r\n                    'required': {\r\n                        isValid: true\r\n                    }\r\n                }\r\n            } );\r\n            cacheMock.setValue.restore();\r\n            expect( result ).toEqual( {\r\n                isValid: true,\r\n                results: {\r\n                        required: { isValid: true }\r\n                    }\r\n            } );\r\n            done();\r\n        } ).catch( function() {\r\n            fail();\r\n            done();\r\n        } );\r\n    } );\r\n\r\n    it( 'should validate one field with failure', function( done ) {\r\n        var spy = sinon.spy( cacheMock, 'setValue' );\r\n\r\n        var resolver = { getValidator: function() {} };\r\n\r\n        var validationResolver = sinon.mock( resolver );\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' },\r\n                'email': { message: 'Not a valid email address' }\r\n            }\r\n        }, resolver, cacheMock, false );\r\n\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .once()\r\n            .withExactArgs( 'required' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function() {\r\n                    return new Promise( function( resolve ) {\r\n                        resolve( { isValid: true } );\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .once()\r\n            .withExactArgs( 'email' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function( value, config ) {\r\n                    return new Promise( function( resolve, reject ) {\r\n                        reject( { isValid: false, message: config.message } );\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.validate( 'fieldA' ).then( function() {\r\n            fail();\r\n            done();\r\n        } ).catch( function( result ) {\r\n            spy.firstCall.calledWith( '.fieldA', {\r\n                value: 'test',\r\n                validators: {\r\n                    'required': {\r\n                        isValid: true\r\n                    }\r\n                }\r\n            } );\r\n            spy.secondCall.calledWith( '.fieldA', {\r\n                value: 'test',\r\n                validators: {\r\n                    'required': {\r\n                        isValid: true\r\n                    },\r\n                    'email': {\r\n                        isValid: false,\r\n                        message: 'Not a valid email address'\r\n                    }\r\n                }\r\n            } );\r\n\r\n            cacheMock.setValue.restore();\r\n            expect( result ).toEqual( {\r\n                isValid: false,\r\n                results: {\r\n                    required: { isValid: true },\r\n                    email: { isValid: false, message: 'Not a valid email address' }\r\n                }\r\n            } );\r\n            done();\r\n        } );\r\n\r\n        // validationResolver.verify();\r\n        // TODO: why does this crashes the validation\r\n\r\n    } );\r\n\r\n    it( 'should validate the form with success', function( done ) {\r\n        var resolver = { getValidator: function() {} };\r\n        var validationResolver = sinon.mock( resolver );\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' },\r\n                'email': { message: 'Not a valid email address' }\r\n            },\r\n            'fieldB': {\r\n                'required': { message: 'Required field not set' }\r\n            }\r\n        }, resolver, cacheMock );\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .twice()\r\n            .withExactArgs( 'required' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function() {\r\n                    return new Promise( function( resolve ) {\r\n                        resolve( { isValid: true } );\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .once()\r\n            .withExactArgs( 'email' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function() {\r\n                    return new Promise( function( resolve ) {\r\n                        resolve( { isValid: true } );\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.setValue( 'fieldB', 'lorem ipsum' );\r\n        validationService.validateForm().then( function( result ) {\r\n            expect( result ).toEqual( {\r\n                isValid: true,\r\n                results: {\r\n                    'fieldA': {\r\n                        isValid: true,\r\n                        results: {\r\n                            required: { isValid: true },\r\n                            email: { isValid: true }\r\n                        }\r\n                    },\r\n                    'fieldB': {\r\n                        isValid: true,\r\n                        results: {\r\n                            required: { isValid: true }\r\n                        }\r\n                    }\r\n                }\r\n            } );\r\n            done();\r\n        } ).catch( function() {\r\n            fail();\r\n            done();\r\n        } );\r\n    } );\r\n\r\n    it( 'should validate the form with failure', function( done ) {\r\n        var resolver = { getValidator: function() {} };\r\n        var validationResolver = sinon.mock( resolver );\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' },\r\n                'email': { message: 'Not a valid email address' }\r\n            },\r\n            'fieldB': {\r\n                'required': { message: 'Field B is mendatory' }\r\n            }\r\n        }, resolver, cacheMock );\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .twice()\r\n            .withExactArgs( 'required' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function( value, config ) {\r\n                    return new Promise( function( resolve, reject ) {\r\n                        if ( value === '' ) {\r\n                            reject( {\r\n                                isValid: false,\r\n                                message: config.message\r\n                            } );\r\n                        } else {\r\n                            resolve( { isValid: true } );\r\n                        }\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationResolver.expects( 'getValidator' )\r\n            .once()\r\n            .withExactArgs( 'email' )\r\n            .returns( new Promise( function( resolve ) {\r\n                resolve( function() {\r\n                    return new Promise( function( resolve ) {\r\n                        resolve( { isValid: true } );\r\n                    } );\r\n                } );\r\n            } ) );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.setValue( 'fieldB', '' );\r\n        validationService.validateForm().then( function() {\r\n            fail();\r\n            done();\r\n        } ).catch( function( result ) {\r\n            expect( result ).toEqual( {\r\n                isValid: false,\r\n                results: {\r\n                    'fieldA': {\r\n                        isValid: true,\r\n                        results: {\r\n                            required: { isValid: true },\r\n                            email: { isValid: true }\r\n                        }\r\n                    },\r\n                    'fieldB': {\r\n                        isValid: false,\r\n                        results: {\r\n                            required: {\r\n                                isValid: false,\r\n                                message: 'Field B is mendatory'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } );\r\n            done();\r\n        } );\r\n    } );\r\n\r\n    it( 'should succeed when getting a valid value from cache', function( done ) {\r\n        var cacheMock = {\r\n            isCached: function() {\r\n                return true;\r\n            },\r\n            getValue: function() {\r\n                return {\r\n                    value: 'test',\r\n                    results: {\r\n                        required: {\r\n                            isValid: true\r\n                        }\r\n                    }\r\n                };\r\n            },\r\n            setValue: function() {}\r\n        };\r\n\r\n        var validationResolver = { getValidator: function() {\r\n            fail();\r\n            done();\r\n        } };\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' }\r\n            }\r\n        }, validationResolver, cacheMock );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.validate( 'fieldA', 'test' ).then( function( result ) {\r\n            expect( result ).toEqual( {\r\n                isValid: true,\r\n                results: {\r\n                    required: { isValid: true }\r\n                }\r\n            } );\r\n            done();\r\n        } ).catch( function() {\r\n            fail();\r\n            done();\r\n        } );\r\n    } );\r\n\r\n    it( 'should fail when getting a invalid value from cache', function( done ) {\r\n        var cacheMock = {\r\n            isCached: function() {\r\n                return true;\r\n            },\r\n            getValue: function( cacheKey ) {\r\n                expect( cacheKey ).toBe( 'foo.fieldA' );\r\n                return {\r\n                    value: '',\r\n                    results: {\r\n                        required: {\r\n                            isValid: false,\r\n                            message: 'Required field not set'\r\n                        }\r\n                    }\r\n                };\r\n            },\r\n            setValue: function() {}\r\n        };\r\n\r\n        var validationResolver = { getValidator: function() {\r\n            fail();\r\n            done();\r\n        } };\r\n        var validationService = new ValidationService( {\r\n            'fieldA': {\r\n                'required': { message: 'Required field not set' }\r\n            }\r\n        }, validationResolver, cacheMock );\r\n\r\n        validationService.setValue( 'fieldA', '' );\r\n        validationService.validate( 'fieldA', 'foo' ).then( function() {\r\n            fail();\r\n            done();\r\n        } ).catch( function( result ) {\r\n            expect( result ).toEqual( {\r\n                isValid: false,\r\n                results: {\r\n                    required: {\r\n                        isValid: false,\r\n                        message: 'Required field not set'\r\n                    }\r\n                }\r\n            } );\r\n            done();\r\n        } );\r\n    } );\r\n\r\n    it( 'should mark a field as valid when there is no validator configured', function( done ) {\r\n        var validationResolver = { getValidator: function() {\r\n            fail();\r\n            done();\r\n        } };\r\n\r\n        var validationService = new ValidationService( {}, validationResolver, cacheMock );\r\n\r\n        validationService.setValue( 'fieldA', 'test' );\r\n        validationService.setValue( 'fieldA', '' );\r\n        validationService.validate( 'fieldA', '' ).then( function( result ) {\r\n            expect( result ).toEqual( {\r\n                isValid: true\r\n            } );\r\n            done();\r\n        } ).catch( function() {\r\n            fail();\r\n            done();\r\n        } );\r\n    } );\r\n} );\r\n",
    "static": true,
    "longname": "D:/work/denkstrap-tooltip-belt-validation/test/validation/validation.service.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/validation/validation.service.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115",
    "access": null,
    "description": "Validation Service",
    "lineNumber": 4,
    "testTargets": [
      "ValidationService"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it116",
    "access": null,
    "lineNumber": 24
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it117",
    "access": null,
    "description": "should throw an error when the validation resolver does not implement the getValidator method",
    "lineNumber": 33
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it118",
    "access": null,
    "description": "should throw an error when the cache does not implement the getValue method",
    "lineNumber": 42
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it119",
    "access": null,
    "description": "should throw an error when the cache does not implement the setValue method",
    "lineNumber": 53
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it120",
    "access": null,
    "description": "should save the config on construction",
    "lineNumber": 64
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it121",
    "access": null,
    "description": "should have a function setValues() setting all values",
    "lineNumber": 75
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it122",
    "access": null,
    "description": "should have a function setValue() setting a specific value",
    "lineNumber": 88
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it123",
    "access": null,
    "description": "should validate one field with success",
    "lineNumber": 97
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it124",
    "access": null,
    "description": "should validate one field with failure",
    "lineNumber": 142
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it125",
    "access": null,
    "description": "should validate the form with success",
    "lineNumber": 220
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it126",
    "access": null,
    "description": "should validate the form with failure",
    "lineNumber": 283
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it127",
    "access": null,
    "description": "should succeed when getting a valid value from cache",
    "lineNumber": 356
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it128",
    "access": null,
    "description": "should fail when getting a invalid value from cache",
    "lineNumber": 399
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/validation/validation.service.spec.js~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "test/validation/validation.service.spec.js~describe115.it129",
    "access": null,
    "description": "should mark a field as valid when there is no validator configured",
    "lineNumber": 447
  }
]